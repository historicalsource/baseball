	.TITLE BSBALL
	.RADIX 16
	.ENABL AMA
	.IIF NDF,NTB,NTB=1
	.ASECT
	.SBTTL ******************************
	.SBTTL * PROGRAMMER: ED ROTBERG    *
	.SBTTL *                            *
	.SBTTL * CHECKER:                   *
	.SBTTL *                            *
	.SBTTL ******************************
	.REPT 0

DATE INITIATED: 23-JAN-79
PROJECT CHARGE #: 
DISK #:		109
HARDWARE REQUIREMENTS:	MONSTER-MAN PCB, CONSISTING OF BASIC MOC16
			WITH ADDITIONS	
					1) 4 ANODE MULTIPLEXED LED DISPLAYS
					2) ALPHANUMERICS ON EDGES OF PLAYFIELD,
					   3 USABLE ROWS PER EDGE.

MEMORY REQUIREMENTS:	768 BYTES WORKING RAM
			256 BYTES ALPHANUMERICS RAM
			960 BYTES SCROLL-FIELD RAM
			 64 BYTES MOTION-OBJECT PARAMETERS

			 8K BYTES PROGRAM ROM

INTERRUPT REQUIREMENTS:	FOUR IRQ'S PER FRAME. THESE ARE IN GENERAL ON THE
			FALLING EDGE OF 32V, WITH THE EXCEPTION OF THE LAST,
			WHICH OCCURS AT LINE 240, RATHER THAN LINE 256, TO ALLOW
			MAXIMUM USE OF VERTICAL RETRACE TIME.TIMING OF THESE
			IRQ'S IS IMPORTANT, BECAUSE THE ANODE DRIVERS OF THE
			MULTIPLEXED LED DISPLAY ARE DRIVEN DIRECTLY BY
			V-FUNCTIONS, AND THE CATHODES ARE HELD OFF BY THE IRQ
			SIGNAL. IN PARTICULAR: A) THE IRQ MUST BE ACKNOWLEDGED
			(BY A STORE TO INTACK, LOCATION 3000 HEX) BEFORE NEW
			INFORMATION FOR THE CATHODES IS WRITTEN. B) THE IRQ MUST
			NOT (!) BE ACKNOWLEDGED BETWEEN LINES 240 AND 256, AS IT
			WILL BE RE-ASSERTED AT LINE 256 IN THAT CASE. FOR THIS
			REASON THE INPUT "VBLANK" (D7, LOCATION 4001) IS REALLY
			THE SIGNAL "ENDSCREEN" WHICH IS ASSERTED ONLY IN LINES
			240 THRU 256.

ASSEMBLY COMMAND STRING:*BSBA1,BSBA1=BSBA1/C

LINK COMMAND STRING:	PP:/L=BSBA1,BSCOIN,BSINT

PROGRAM DESCRIPTION: MAIN PROGRAM FOR "MONSTER-MAN BASEBALL".
		     USES STANDARD COIN ROUTINE, (CUSTOMIZED BY BSCOIN)
		     ON FILE BSCOIN.OBJ FOR HANDLING COINS.
		     BSINT IS INTERRUPT, TEST, AND VECTORS.  BSCOMN
		     (INCLUDED) DEFINES STORAGE. GAME IS ON "EACH COIN
		     ADDS TIME" BASIS
	.ENDR
NPLAYS=4
	.GLOBL $CNCT
	.INCLUDE BSCOMN

	.IIF NDF,AIM,AIM=0	;DEFAULT TO NO AIM
	.IF NE,AIM
	.SBTTL AIM,DEBUG STUFF
	.=PROG-100		;HANG THIS UNDERNEATH
AIMENT:	SEI
	LDA I,0
	.=.-1
	.WORD IRQ		;FORM "LDA I,IRQ&0FF"
	.=.-1			;BACKSPACE OVER HIGH BYTE
	STA A,0F7C8		;STORE IN AIM'S "VECTOR"
	LDA I,0
	.=.-1
	.ENABL M68		;SWAB FOLLOWING WORD
	.WORD IRQ		;FORM "LDA I,IRQ/100"
	.DSABL M68		;BACK TO L,H
	.=.-1			;BACKSPACE OVER LOW BYTE
	STA A,0F7C9
	LDA I,0
	STA A,100
	STA A,101		;CORK TRACE LIST
	STA A,APAT1		;BREAK @ APAT1
	LDA I,TRACE&0FF		;PATCH "JSR FANS"
	STA A,APAT0+1		;TO BE "JSR TRACE"
	LDA I,TRACE/100
	STA A,APAT0+2
	JMP RESET
	.SBTTL TRACE UTILITY
;BEGIN INTEGER J, WORD ARRAY TSRC, BYTE ARRAY TDST
;J:=0
;WHILE (TSRC(J).NE.0) DO
;SCREEN (TDST(J))=MEMORY (TSRC(J))
;J:=J+1
;END
TRACE:	LDY I,0
	STY J
1$:	LDY J
	LDA AY,TSRC
	STA ADL
	LDA AY,TSRC+1
	STA ADH			;BUILD PTR TO BYTE
	ORA ADL
	BEQ 2$			;TRCING 0000=END
	LDX I,0
	LDA NX,ADL		;GET BYTE
	JSR ASCAX		;CONVERT TO ASCII IN A,X
	PHA
	LDA AY,TDST
	INY
	INY
	INY
	STY J			;SAVE LIST PTR
	TAY			;POINT TO SCREEN
	PLA			;GET HIGH NYBBLE
	JSR WRTAN		;WRITE ALPHANUMERICS
	TXA			;LOW NYBBLE
	JSR WRTAN
	JMP 1$
2$:	JMP FANS		;DO WHAT HE WANTED
	.ENDC
	.PAGE
	.SBTTL INITIALIZE
	.=PROG
START:	CLI
	JSR STRTGM		;"START GAME"
	.SBTTL "MAIN-LOOP"
WAIT:
	
1$:	LSR SYNC
	BCC 1$		;WAIT FOR V-BLANK
	STA A,WTCHDG
	JSR MOVLEG
	JSR RAND
	INC FRAME
	JSR GAME
APAT0:	JSR FANS		;AIM PATCHES HERE
	BIT A,TEST
	BVS WAIT		;BRANCH IF TEST OFF
APAT1:	JMP RESET		;FAKE RESET
CKS0:	.BYTE 3A
	.PAGE
	.SBTTL GAME MASTER CONTROL

;BLOCK NAME:	START GAME
;BLOCK TYPE:	DIRECT
;DESCRIPTION:	START GAME WRITES OUT THE PLAYFIELD, MOVES ALL PLAYERS TO
;		THEIR DUGOUTS. INITIALIZES, RUNS, OFFENSE #, TIMERS, INNINGS
;		AND WRITES OUT THE SCOREBOARD.
;
;INPUT PARAMS:	ATRACT
;OUTPUT PARAMS:	PLAYFIELD, SCOREBOARD, RUNS, INNINGS, STATE PLAYER POSITIONS,
;		WHISTL, CRACK, THUD, PAUST
;SUBS USED:	CAN,PLYFLD,BANNER,DSTAT
;REGS USED:	A,X,Y
;STACK USAGE:	NONE
;
STRTGM:	JSR CAN
	LDA I,S.PAUS		;SET INTO PAUSE
	STA STATE
	LDA I,10		;INIT PAUSE TIMER
	STA PAUST
	LDA I,0			;INITIALIZE
	STA RUNS		;RUNS
	STA RUNS+2
	STA OFFENS		;VISITORS OF FIRST
	JSR PLYFLD		;WRITE OUT PLAYFIELD
	LDA I,1
	STA INNING		;1ST INNING
	LDX I,PITCHER*2		;START ALL PLAYERS IN DUGOUT
10$:	LDA I,HDUGD
	STA AX,HPOSH
	LDA I,VDUGD
	STA AX,VPOS
	INX
	INX
	CPX I,BATTER*2		;OFFENSIVE PLAYERS IN OTHER DUGOUT
	BNE 10$
20$:	LDA I,HDUGO
	STA AX,HPOSH
	LDA I,VDUGO
	STA AX,VPOS
	INX
	INX
	CPX I,<BATTER+4>*2
	BNE 20$
	JSR BANNER		;WRITE OUT SCOREBOARD
	BIT ATRACT
	BPL 25$
	INC SCBDLV		;POINT TO FIRST INNING
	DEC SCBDRV
	LDA I,1C
	STA RUNING
25$:	LDA I,0
	STA WHISTL		;KILL LEFT OVER SOUND
	STA CRACK
	STA THUD
	JSR DSTAT		;DISPLAY STATISTICS
	.SBTTL GAME CONTROL
;BLOCK NAME:	GAME
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	GAME HANDLES COIN MODES AND ONE OR TWO PLAYER START
;		CONDITIONS.  IT PUTS GAME INTO GAME MODE AND INITIALIZES
;		TPC LOCATIONS FOR PLAY SECTION.
;
;INPUT PARAMS:	$CNCT,ININGS,ATRACT,CLK8S,SCNDQT,PLYR1,CMPLYR
;OUTPUT PARAMS:	ININGS,ATRACT,SCNDQT,BEEP,LEDWD+1,PLYR1,CMPLYR
;REGS USED:	A,X,Y
;STACK USAGE:	NONE
;SUBS USED:	UPING,DSTAT,BUTTON,WRITEB,REPLAC
;
GAME:	BIT ATRACT
	BPL 2$			;IF ATTRACT, BRK
	LDA PLYR2
	ORA PLYR1		;NO ONE PUSHED YET
	BEQ 2$
	LDA I,1B		;BLANK SCORE BOARD
	BIT INTCNT
	BVS 1$
	LDA RUNING		;BLINK SCORE BOARD
1$:	LDX OFFENS
	STA NX,SCBDRV
	ORA I,40
	STA NX,SCBDLV
2$:	LDA $CNCT		;ANY COINS
	BEQ 10$			;NO!
	DEC $CNCT		;SUBTRACT 1
	LDA ININGS		;1 ST COIN DEPOSITED
	BNE 5$			;YES, SKIP CRAP
	LDA I,-1
	STA ATRACT		;GO TO GAME MODE
5$:	JSR UPING
	JSR DSTAT
10$:	LDA PLYR2		;2 PLAYER GAME?
	BNE 37$			;YES SKIP THIS CRAP
	LDA ININGS		;ANY MONEY YET?
	BEQ 37$			;NO
	LDA PLYR1		;NONE PLAYER
	BEQ 15$			;NO
	LDA INNING		;YES FIRST INNING?
	LSR
	BNE 37$			;NO TOO LATE
	LDA ININGS		;MORE THAN 1 COIN?
	LSR
	BNE 30$			;YES
	LDY I,0
	LDX CMPLYR
	LDA I,M.IC
	BNE 35$
15$:	STA LEDWD+1		;TURN OFF LICONS
	LDX I,2
16$:	JSR BUTTON		;BUTTON PRESSED?
	BNE 20$			;YES
	DEX
	DEX
	BPL 16$
	LDA I,M.PS		;NO, "PUSH START"
	BIT INTCNT		;FLASH IT
	BMI 18$
	LDY I,3			;TURN ON LICONS
	STY LEDWD+1
	ORA I,80
18$:	JMP WRITEB
30$:	LDY I,1			;LIGHT BUTTON LIGHTX
	LDX CMPLYR
	BEQ 31$
	INY
31$:	STY LEDWD+1
	LDY I,0
	STY TEMP1
	JSR BUTTON		;LOOK FOR BUTTON PUSH
	BNE 38$			;PUSHED IT
	LDY TEMP1
	LDA I,M.PS		;"PUSH START"
35$:	BIT INTCNT		;FLASH IT
	BMI 36$
	STY LEDWD+1
	ORA I,80
36$:	JSR REPLAC
37$:	JMP DSPTCH
38$:	LDA I,0			;RESET ONE PLAER GAME
	STA PLYR1
	INC PLYR2
	LDA ININGS		;DECREMENT # OF INNINGS
	SEC
	SED
	SBC I,1
	CLD
	STA ININGS
	BNE DSPTCH		;ALWAYS
20$:	INC PLYR1		;INDICATE 1 PLAYER
	TXA
	EOR I,2			;COMPUTE PLAYER
	STA CMPLYR
	LDA I,M.RDY		;TELL HIM "READY"
	JSR REPLAC
40$:	LDA I,<PLAYIT&0FF>-1	;INIT TPC FOR MOD. CASE 5 MT.
	STA TPC
	LDA I,<PLAYIT&0FF00>/100
	STA TPC+1
	JMP STRTGM		;DO NECCESSARY INITIALIZATION

DSPTCH:	BIT STATE		;WHAT STATE ARE WE IN
	BMI PAUSE		;S.PAUS=80
	BVS 1$
	JMP SELECT		;S.SEL=1
1$:	JMP PLAY		;MUST BE PLAY (S.PLAY=40)

	.PAGE
	.SBTTL PAUSE STATE CONTROLLER
;BLOCK NAME:	PAUSE
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	PAUSE WILL TIME THE PAUSE TRANSITION STATE BETWEEN PLAY
;		STATE AND SELECT STATE, AND SET STATE SELECT AT TERMINATION
;		IN ADDITION, PAUSE WILL INITIALIZE VARIOUS VARIABLES AND
;		TIMERS, CHANGE FIELDS AT END OF EACH HALF INNING, INIT SCORE
;		BOARD FOR EACH 1/2 INNING, MOVE PLAYERS TO STARTING POSITIONS,
;		HANDLE LAST 1/2 INNING WARNING AND END THE GAME.
;
;INPUT PARAMS:	PAUST,OUTS,INNING,ININGS,SCBDL,SCBDRV,SCBDCH,SCBDRH,ATRACT
;OUTPUT PARAMS:	PSTIM,LEDWD,ATRACT,ININGS,SCNDQT,INNINGS,SCBDRV,SCBDLV,
;		SCBDRH,SCBDLH,BEEP,PLAYNO,STATE,MPSTIM
;REGS USED:	A,X,Y
;STACK USAGE:	NONE
;SUBS CALLED:	BANNER,WRITEB,PLYFLD,INIT,SETUP,RAND,SCORBD
;
PAUSE:	LDA W30TIM		;WARNING TIMER RUNNING?
	BEQ 8$
	JMP 10$			;YES
8$:	LDY PAUST		;CHECK PAUSE TIMER
	BNE 2$			;TIMED OUT
1$:	JMP 40$
2$:	DEC PAUST		;RUN IT
	BEQ 4$
	RTS
4$:	LDA I,-1		;INITIALIZE PLAY SELECT TIMERS
	STA PSTIM
	STA PSTIM+2
	LDA I,0			;DOUSE LED'S
	STA LEDWD
	STA LEDWD+2
	LDA I,2
	CMP OUTS		;3 OUTS?
	BCC 5$			;YES
	JMP 44$			;NO-NORMAL PROCESSING
5$:	LDA OFFENS		;YES
	EOR I,2
	STA OFFENS		;END OF INNING?
	BNE 48$			;NO, -1/2 INNING
	BIT ATRACT		;GAME MODE?
	BPL 49$			;NO
	LDA INNING		;YES
	CMP ININGS
	BNE 20$
	LDA I,M.GO		;GAME IS OVER
	JSR WRITEB
	LDX I,2
	JSR SCORBD
	LDA I,0			;SET TO ATTRACT MODE
	STA ATRACT
	STA ININGS		;INITIALIZE
	STA PLYR1
	STA PLYR2
	BEQ 42$
20$:	AND I,0F		;INNING ROLLOVER?
	BNE 25$			;NO
	JSR BANNER		;YES, START AT INING #1
25$:	LDA INNING		;INCREMENT CURRENT INNING #
	CLC
	SED
	ADC I,1
	CLD
	STA INNING
	LDX I,2
	JSR SCORBD
	INC SCBDLV		;UPDATE POINTERS
	DEC SCBDRV
	LDA I,1C
	STA RUNING
	BNE 42$			;ALWAYS
48$:	BIT ATRACT
49$:	BPL 42$
	LDX I,0
	JSR SCORBD
	INC SCBDLH		;UPDATE POINTERS
	DEC SCBDRH
	LDA I,1C
	STA RUNING
	LDA INNING
	CMP ININGS		;LAST 1/2 INNING?
	BNE 42$
	LDA I,90.
	STA W30TIM		;YES, START WARNING TIMER
	LDA I,M.GAO		;SUCK COINS!!!! (SHAME ON YOU!!!)
	JMP WRITEB
10$:	LSR			;NOT TIMED OUT YET
	BNE 12$
	STA W30TIM		;TIMED OUT!
	STA BEEP		;TURN OFF BEEP
	BEQ 42$
12$:	DEC W30TIM		;TIME
	AND I,2
	BEQ 15$
	LSR
15$:	STA BEEP		;BEEP EVERY OTHER DECREMENT
	LDA W30TIM		;1/2 WAY THROUGH TIME?
	CMP I,45.
16$:	BNE 45$			;NO
	LDA I,M.ECAT		;YES, CHANGE MESSAGE
	JMP WRITEB
42$:	JSR PLYFLD		;CHANGE FIELDS
44$:	JSR INIT
40$:	BIT ATRACT
	BPL 43$
	LDX I,2
	JSR BUTTON
	BNE 47$
	LDX I,0
	JSR BUTTON
	BEQ 43$
47$:	INC SETFLG
43$:	LDX I,BATTER*2		;LAST PLAYER TO SETUP
	JSR SETUP		;MOVE PLAYERS
	BNE 45$
46$:	LDX I,2
41$:	JSR RAND		;START WITH RANDOM PLAY #
	LSR
	LSR
	AND I,3
	STA ZX,PLAYNO
	DEX
	DEX
	BPL 41$
	LDA I,S.SEL
	STA STATE		;STATE=SELECT
	LDA I,-1
	STA MPSTIM
45$:	RTS
	.PAGE
	.SBTTL SCOREBOARD UPDATE
;BLOCK NAME:	SCORBD
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	UPDATE SCOREBOARD
;INPUT PARAMS:	X=0 FOR VISITOR 1 FOR HOME, RUNING
;OUTPUT PARAMS:	SCOREBOARD UPDATED
SCORBD:	LDA RUNING
	STA NX,SCBDRV
	ORA I,40
	STA NX,SCBDLV
	RTS
	.PAGE
	.SBTTL SELECT STATE CONTROLLER
;BLOCK NAME:	SELECT
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	HANDLES THE PLAY SELECTION OR OUTPUTTING OF MESSAGES DURING
;		ATTRACT.  SETS STATE=PLAY
;INPUT PARAMS:	PSTIM,ATRACT,PLAYNO
;OUTPUT PARAMS:	PINFO,ANGLE,STATE
;REGS USED:	A,X,Y
;STACK USAGE:	NONE
;SUBS USED:	FIELDR,PSEL,WRITEB,RAND,TELLEM

SELECT:	JSR FIELDR		;RESET EVERYTHING
	JSR PSEL		;CHECK BUTTONS
	LDA PSTIM
	ORA PSTIM+2		;"OR" OF INDIV TIMERS
	BNE 20$			;BRANCH IF STILL WAITING
	STA SETFLG		;RESET SET FLAG
15$:	LDA I,S.PLAY		;ELSE ENTER PLAY
	STA STATE
	BIT ATRACT
	BMI 16$
	LDA I,M.ECAT		;MONEY REQUEST
	JSR WRITEB
	INC 24F			;2 COINS/INNING
	INC 3AE
	BNE 18$
16$:	LDA I,M.RDY		;"READY"
	JSR WRITEB
18$:	JSR RAND
	LSR
	LSR
	AND I,0F		;SET UP CURVE START
	CLC
	ADC I,STCRV1
	STA PINFO
	LDX OFFENS
	LDA ZX,PLAYNO		;SET CARRY IF LEFTY
	LSR
	LDA I,81
	BCC 17$
	LDA I,82		;ADJUST INITIAL ANGLE SLIGHTLY FOR LEFTY
17$:	STA ANGLE
	RTS
20$:	BIT ATRACT
	BMI 25$
	LDA I,M.IC		;IN ATTRACT, ASK FOR MONEY
	JSR WRITEB
	RTS
25$:	JSR TELLEM		;IN GAME, REMIND THEM TO SELECT
	RTS
	.SBTTL GAME PLAY
;
;BLOCK NAME:	GAME PLAY
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIP:	MAINLINE GAME PLAY ROUTINE
;
PLAY:				;DISPLAY STATISTICS
	LDA I,<EXIT&0FF00>/100	;HIGH BYTE OF EXIT
	LDX I,0
	CMP NX,TPC
	BEQ 1$			;EVERYTHING KOSHER
	JMP RESET		;BADO BADO (SKU-BA-DO-DO??)
1$:	LDA TPC+1		;SET UP MODIFIED CASE CONSTRUCT
	PHA
	LDA TPC
	PHA
	RTS
	.BYTE <EXIT&0FF00>/100
PLAYIT:	JSR PITCH		;PITCH BALL
	JSR SWING		;SWING BAT
	JSR FLITE		;MOVE BALL
	JSR HITCHK		;BALL HIT?
	BCC 10$			;NO
	LDA I,-1		;YES
	STA CLK32S
	JMP HIT
10$:	JSR FIELDR		;MOVE FIELDERS
	JSR CATCH		;BALL CAUGHT BY CATCHER?
	BCS COUNT		;YES
	JSR EXIT		;NO
	JMP PLAYIT		;CONTINUE
COUNT:	LDA CALL		;CHECK CALL
	BMI 10$			;HIT BATSMAN
	BNE STRKBL		;STRIKE
	LDA I,M.BALL		;BALL
	JSR WRITEB		;TELL THEM
	LDA I,48		;SAY BALL
	STA FLASH
	INC BALLS
	LDA I,4			;WALK?
	CMP BALLS
	BEQ 1$
	JMP ENDPLY		;NO
1$:	LDX OFFENS		;YES, CORRECT PICTURE ORIENTATION
	LDA ZX,PLAYNO
	LSR			;CARRY=LEFTY
	LDA A,MOBJ+<BATTER*2>
	BCC 5$
	EOR I,80		;CHANGE LEFTY TO RIGHTY
5$:	AND I,0C0
	ORA I,08		;MAKE RUNNER
	STA A,MOBJ+<BATTER*2>
	LDA I,1			;SET BATTER TO DRONE MODE
	STA MOVE
	STA FSTFLD		;FOOL CKBASE TO STOP HIM AT 1ST
	LDA A,BGOALH+2		;MOVE BATTER TO FIRST
	STA A,HGOAL+<BATTER*2>
	LDA A,BGOALV+2
	STA A,VGOAL+<BATTER*2>
	JSR CKBASE		;MOVE'EM ALONG
	JSR FORCHK		;ONLY MOVE OTHER RUNNERS IF FORCED
	JMP WRAP
10$:	LDA I,M.HB		;HIT BATTER
	JSR WRITEB
	LDA I,3C		;LET THEM HEAR THE BALL HIT BATTER
	STA THUD
	LDA I,70		;BUNCH OF SADISTS!!! YOU BETCHA!
	STA CHEER
	JMP 1$			;JUST LIKE WALK
STRKBL:	LDA I,M.STRK		;TELL'EM STRIKE
	JSR WRITEB
	LDA I,40		;SAY STRIKE
	STA FLASH
STRKB0:	INC STRIKE
	LDA I,3			;3 STRIKES?
	CMP STRIKE
	BEQ 10$			;YES, BATTER IS OUT!
	JMP ENDPLY
10$:	INC OUTS
	CMP OUTS		;3 OUTS?
	BNE 20$
	JMP ENDING		;YES
20$:	LDX I,0			;NO- PUT OUT BATTER
	JSR PUTOUT
	INC BATOUT
	LDA I,0			;STOP OTHER RUNNERS
	STA MOVE+1
	STA MOVE+2
	STA MOVE+3
	JMP WRAP		;WRAP UP PLAY
HIT:	LDA FRAME		;MASTER PLAY TIME -32 SECONDS AFTER BALL HIT
	AND I,3
	BNE 40$
	DEC CLK32S		;DECREMENT EVERY FOURTH FRAME
	BNE 40$			;NOT TIMED OUT
	INC FSTFLD		;TIMED OUT
	BNE 41$
40$:	LDA FSTFLD		;BALL BEEN FIELDED ONCE YET?
	BEQ 3$			;NO
	LDA BATOUT		;YES, IS BATTER OUT?
	BEQ 1$			;NO
	LDA MOVE+1		;YES, IS ANYBODY ELSE MOVING?
	ORA MOVE+2
	ORA MOVE+3
	BEQ 6$			;NO!
	BNE 3$			;YES
1$:	LDX I,BATTER*2		;IS BATTER ON BASE (OTHER THAN HOME)
	JSR BASCOL
	AND I,0FB
	BEQ 3$			;NO
6$:	DEC CLCK2S		;YES, TIMEOUT PLAY IF HE STAYS THERE 2 SEC.
	BNE 4$
41$:	LDX HASBAL		;TIMED OUT, WHO HAS BALL
	BEQ 7$			;NO ONE
	LDA AX,MOBJ		;TURN HIS PICTURE ON
	ORA I,0A
	STA AX,MOBJ
7$:	LDA I,0			;MAKE SURE NO ONE HAS THE BALL
	STA HASBAL
	LDA I,PITCHER*2		;MOVE BALL TO PITCHER
	STA TOBALX
2$:	JSR AUTOBL		;MOVE BALL
	BEQ 9$			;BRANCH IF DONE
	JSR EXIT
	JMP 2$			;LOOP
3$:	LDA I,55.		;RESET TIMER
	STA CLCK2S
4$:	JSR BATRUN		;MOVE BATTER
	JSR FIELDR		;MOVE FIELDERS
	JSR RUN			;MOVE RUNNERS
	JSR INFLD		;MOVE INFIELDERS
	JSR CKBASE		;CHECK THE BASES
	JSR SWING		;SWING BAT REST OF WAY AROUND
	LDA I,FLDFLG		;BALL FIELDED?
	BIT BALFLG
	BNE FLDPLY		;YES
	JSR COLCHK		;NO- TRY TO FIELD IT
	LDA I,3
	CMP OUTS		;3 OUTS
	BNE 5$
	JMP ENDING		;YES!
5$:	LDA I,PLYEND		;PLAY ENDED.
	BIT BALFLG
	BEQ 10$			;NO, CONTINUE.
9$:	JMP WRAPUP		;END OF PLAY
10$:	LDA I,THROFL		;IS THIS A THROWN BALL?
	BIT BALFLG
	BNE 20$			;YES
	JSR FLITE		;NO- A HIT BALL
	BCC 15$			;NOTHING UNUSUAL
	JSR CKBASE
	JMP WRAP		;HOMER OR TRIPLE
15$:	JSR BOUNCE
	LDA I,FOUL		;BALL FOUL
	BIT BALFLG
	BEQ 30$			;NO
	JMP FOULBL		;YES
20$:	JSR DEFENS		;COMPUTER ON DEFENSE
	BCS 22$			;YES
	BIT ATRACT
	BMI 25$			;GAME MODE
22$:	JSR AUTOBL		;AUTOMATIC THROWS
	BNE 30$
25$:	JSR BALMOV		;TRACK BALL THROWS
30$:	JSR EXIT
	JMP HIT
FLDPLY:	LDX HASBAL		;GET PLAYER WITH BALL
	JSR BASCOL		;TOUCHING A BASE
	BEQ 42$			;NO- NO FORCE POSSIBLE
	STA TEMP1		;SAVE BASE #
	TAY
	DEY
	BEQ 20$			;SPECIAL CASE. FORCE AT FIRST
	LDA FORCE
	LSR			;GET RID OF FORCE AT FIRST
5$:	LSR			;FORCE SET CARRY
	BCC 40$			;NO MORE FORCES
	DEY			;FIELDER AT FORCE BASE?
	BNE 5$			;NOT YET
	LDX I,3			;FORCE OUT POSSIBLE
	LDA TEMP1
	SBC I,1			;LOOK FOR PLAYER OUT ON FORCE
10$:	CMP ZX,BASE
	BNE 15$			;DON'T HAVE HIM YET
11$:	LDA I,0FF		;GOT HIM
	LDY TEMP1		;REMOVE FORCE
12$:	DEY
	BEQ 13$
	ASL
	BNE 12$
13$:	EOR I,0FF
	AND FORCE
	STA FORCE
	JMP 45$
15$:	DEX			;NEXT
	BNE 10$			;NOT DONE YET
	BEQ TAGCHK		;DONE
20$:	LDA BATOUT		;BATTER OUT?
	BNE 40$			;YEP
	LDA BASE		;ON BASE?
	BEQ 25$			;NO- HE'S OUT
	BPL TAGCHK		;YES
25$:	LDA I,1			;BATTER IS OUT
	STA BATOUT
	LDX I,0			;ZILCH HIM
	BEQ 11$
40$:	LDA FLYOUT		;FLY BALL OUT?
	BEQ TAGCHK		;NO
	LDY I,3
	LDA TEMP1
41$:	CMP AY,BASE		;FORCE OUT?
	BNE 43$			;NO
	TYA			;GET PLAYER INDEX FOR BASE COLLISION ROUTINE
	CLC
	ADC I,BATTER
	ASL
	TAX
	JSR BASCOL		;POSSIBLE FORCE, IS HE ON BASE
	BEQ 44$			;OUT!
	CMP TEMP1
	BNE 44$			;OUT!
42$:	JMP TAGCHK		;SAFE, CHECK FOR TAG OUT
43$:	DEY
	BNE 41$
	BEQ TAGCHK		;ALL DONE
44$:	TYA
	TAX
45$:	INC OUTS		;UPDATE OUTS
	LDA I,3
	CMP OUTS		;3 OUTS
	BNE 46$			;NO
	JMP ENDING		;YES
46$:	JSR PUTOUT
TAGCHK:	JSR TAG			;A TAG POSSIBLE?
	CPX I,0
	BEQ 20$			;NO
	JSR BASCOL		;RUNNER ON BASE?
	BNE 20$			;YES
	CPX I,BATTER*2		;IS IT BATTER?
	BNE 15$			;NO
	LDA BASE		;YES- CHECK FOR OVERRUN
	BEQ 10$			;NO, ON BASE- NO OVERRUN
	LDA AX,HPOSH
	CLC
	ADC AX,VPOS
	BCS 10$			;NO OVERRUN
	CMP I,0AD
	BCC 20$			;OVERRUN
10$:	LDA BATOUT		;BATTER OUT YET?
	BNE 20$			;YES
	INC BATOUT		;NO
15$:	TXA
	SEC
	SBC I,BATTER*2		;GET RUNNER #
	LSR
	TAY
	LDA AY,MOVE
	BMI 20$			;PLAYER ALREADY OUT
	INC OUTS		;UPDATEOUT
	LDA I,3
	CMP OUTS
	BNE 18$
	JMP ENDING		;SIDES RETIRED
18$:	TYA
	TAX
	JSR PUTOUT		;SEND PLAYER TO DUGOUT & OUTPUT OUT MESSAGE
20$:	JSR THROW
	JSR EXIT
	JMP HIT
WRAPUP:	JSR FORCHK		;GET EVERYONE'S DIRECTION
	BIT ATRACT
	BPL 4$
	JSR OFENSE		;COMP ON OFFENSE?
	BCS 4$			;YES
	LDA BATOUT		;BATTER OUT
	BNE 19$		;YEP, ALL SET UP
	LDA BASE		;BATTERS BASE
	BEQ 40$			;ON WAY TO 1ST
	AND I,03
	BNE 5$
4$:	JMP WRAP		;SCORED
5$:	STA MOVE		;SET UP FOR RETURN TO BASE
	TAY			;SAVE
	LDX I,BATTER*2		;BATTER ON A BASE
	JSR BASCOL
	BEQ 10$			;NO
	STA MOVE		;YES- HE STAYS THERE
	BNE 45$
10$:	LDX I,3
	TYA			;SOMEONE ELSE ON HIS BASE?
11$:	CMP ZX,BASE
	BEQ 12$			;YES
	DEX
	BNE 11$			;NOT DONE
	BEQ 15$			;NO ONE THERE
12$:	CMP ZX,MOVE		;IS HE BACKING UP OR STAYING THERE
	BEQ 14$			;STAYING, BACK HIM UP
	LDA ZX,MOVE
	BNE 15$			;HE'S HEADED SOMEWHERE
14$:	DEC MOVE		;BACK HIM UP
	JMP 45$
15$:	LSR
	BEQ 20$			;ON 1ST
	BCC 18$			;2ND OR SCORED
	LDA A,VPOS+<BATTER*2>	;3RD
	SBC I,0A0		;1/2 WAY?
	BMI 35$			;YES
	BPL 45$			;NO
18$:	LSR
19$:	BNE WRAP		;HE SCORED
	LDA A,VPOS+<BATTER*2>	;1/2 WAY?
	SBC I,0A2
	BMI 45$			;NO
	BPL 35$			;YES
20$:	LDA A,VPOS+<BATTER*2>	;1/2 WAY?
	SBC I,62
	BMI 45$			;NO
35$:	INY			;WHAT BASE IS HE HEADED TO?
	LDX I,3
36$:	TYA
	CMP ZX,BASE
	BEQ 37$			;SOMEONE THERE
	DEX
	BNE 36$
	BEQ 40$			;NO ONE THERE
37$:	CMP ZX,MOVE
	BEQ 45$			;BACKING UP TO IT
	LDA ZX,MOVE
	BEQ 45$			;STAYING THERE
40$:	INC MOVE
45$:	LDA MOVE		;SET UP GOALS
	AND I,0F
	ASL
	TAX
	LDA AX,BGOALH
	STA A,HGOAL+<BATTER*2>
	LDA AX,BGOALV
	STA A,VGOAL+<BATTER*2>
	LDA MOVE		;SET UP PICTURE
	LSR
	LSR			;CARRY SET FOR 2ND & 3RD
	LDA I,0C8
	BCC 50$
	EOR I,80
50$:	LDY OFFENS
	BEQ 51$
	EOR I,0C0
51$:	STA A,MOBJ+<BATTER*2>
WRAP:	JSR RUN			;MOVE RUNNERS
	JSR CKBASE		;CHECK POSITIONS
	LDA FSTFLD		;BALL FIELDED ONE YET?
	BNE 10$			;YES
	LDA HOMRUN		;NO, IS THIS HOMERUN OR TRIPLE?
	BEQ 10$			;NEITHER, BRANCH
5$:	BIT MOVE
	BMI 10$			;BATTER SCORED
	BIT INTCNT		;FLASH SCORE BOARD
	BVS 7$
	LDA I,80
	BNE 8$			;ALWAYS
7$:	LDA I,0
8$:	STA FLASH
9$:	BIT HOMRUN
	BPL 10$			;HOMERUN
	LDA I,4			;TRIPLE, WAIT FOR BATTER TO GET TO 3RD
	CMP MOVE
	BNE 20$			;NOT THERE YET
	LDA I,0			;GOT THERE, STOP HIM THERE
	STA MOVE
	INC FSTFLD		;MAKE IT LOOK LIKE BALL FIELDED
10$:	LDA MOVE+1		;HAVE ALL RUNNERS STOPPED MOVING?
	ORA MOVE+2
	ORA MOVE+3
	ORA MOVE
	BNE 20$			;NOT YET
	LDA I,7F		;THEY'VE ALL STOPPED
	AND FLASH		;TURN SCOREBOARD BACK TO NORMAL
	STA FLASH
	LDA I,0		;RESET COUNTS
	STA BALLS
	STA STRIKE
	BEQ BASES
20$:	JSR EXIT
	JMP WRAP
FOULBL:	LDA I,M.FOUL		;INIDICATE FOUL
	JSR WRITEB
	LDA I,50		;SAY FOUL
	STA FLASH
	LDX OFFENS
	LDA ZX,PLAYNO		;IF BUNT, TREAT AS STRIKE
	LSR
	LSR
	BCC 10$			;NO BUNT
5$:	JMP STRKB0
10$:	LDA I,2
	CMP STRIKE
	BNE 5$			;LESS THAN 2 STRIKES
F.END:	JMP ENDPLY
BASES:	LDX I,0
	LDY I,3
	LDA BASE		;CHECK FOR 2 RUNNERS ON A BASE
	BEQ 30$
10$:	CMP AY,BASE
	BNE 20$			;NO, GET NEXT
	INC OUTS		;UPDATE OUTS
	JSR PUTOUT		;SEND BATTER TO DUGOUT
	LDA I,3
	CMP OUTS
	BEQ ENDING		;3 OUTS!!
	JMP WRAP		;LESS THAN 3 OUTS
20$:	DEY
	BNE 10$			;NOT DONE CHECKING
30$:	LDA I,3
	CMP OUTS
	BEQ ENDING		;SIDE RETIRED
	LDA BASE
	AND I,3			;WHAT BASE IS BATTER ON?
	BEQ F.END		;DIDN'T MAKE A BASE
	LDY I,3
	LDX I,<BATTER+3>*2	;LOOK FOR IDLE RUNNER
40$:	LDA AY,BASE
	BNE 45$
	LDA A,MOBJ+<BATTER*2>	;CHANGE PLACES
	STA AX,MOBJ
	LDA A,HPOSH+<BATTER*2>
	STA AX,HPOSH
	LDA A,VPOS+<BATTER*2>
	STA AX,VPOS
	LDA I,HDUGO		;PUT BATTER IN DUGOUT
	STA A,HPOSH+<BATTER*2>
	LDA I,VDUGO
	STA A,VPOS+<BATTER*2>
	LDA BASE
	STA AY,BASE
	BNE ENDPLY		;*** ALWAYS
45$:	DEX
	DEX
	DEY
	BNE 40$
	JMP RESET		;BADO-BADO
ENDING:	LDA I,M.SR		;SIDE RETIRED
	BIT ATRACT		; IN ATTRACT?
	BMI 1$			; NO
	LDA I,M.AB		;YES, OUTPUT "ATARI BASEBALL"
1$:	JSR WRITEB
	LDA I,58		;SAY "YER OUT!!"
	STA FLASH
	LDA I,90		;BIG CHEER
	STA CHEER
	LDX OFFENS		;BACK OUT BAD RUNS		;FROM TOTAL
	LDA ZX,RUNS
	SEC
	SED
	SBC RUNPLY
	CLD
	STA ZX,RUNS
5$:
	LDA RUNING
	SEC
	SBC RUNPLY
	STA RUNING
9$:	LDX I,PITCHER*2		;MOVE PLAYERS OFF OF FIELD
10$:	LDA I,HDUGD
	STA AX,HGOAL
	LDA I,VDUGD
	STA AX,VGOAL
	INX
	INX
	CPX I,BATTER*2		;NOW OFFENSE
	BNE 10$
20$:	LDA I,HDUGO
	STA AX,HGOAL
	LDA I,VDUGO
	STA AX,VGOAL
	LDY OFFENS		;MAKE SURE RUNNERS ARE FACING RIGHT WAY
	BNE 23$
	LDA I,48
	BNE 25$
23$:	LDA I,88
25$:	STA AX,MOBJ
	CPX I,<BATTER+3>*2
	BEQ 30$
	INX
	INX
	BNE 20$			;ALWAYS
30$:	LDX I,<BATTER+3>*2
	JSR SETUP		;MOVE PLAYERS AT FAST SPEED
	BEQ ENDPLY		;DONE
	JSR EXIT
	JMP 30$
ENDPLY:	LDA I,S.PAUSE		;CHANGE STATE
	STA STATE
	LDA I,18		;SET PAUSE TIMER
	STA PAUST
	JSR EXIT
	JMP PLAYIT
EXIT:	JSR DSTAT
	PLA			;SET UP FOR MODIFIED CASE
	STA TPC
	PLA
	STA TPC+1
	RTS
CKS1:	.BYTE 32
	.PAGE
	.SBTTL PITCH ROUTINE
;
;BLOCK NAME:	PITCH
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	PITCH WILL CONROL THE MOTION OF THE BALL TOWARDS THE PLATE
;		BASED ON THE VALUE PTYPE (PLAYNO)
;		WHERE PTYPE:
;			0 = FAST BALL
;			1 = CHANGE UP
;			2 = CURVE BALL
;			3 = KNUCKLE BALL
;
;INPUT PARAMS:	NONE (PTYPE IS GLOBAL)
;OUTPUT PARAMS:	SPEED & ANGLE UPDATED
;REGISTER USED:	A,X,Y
;STACK USAGE:	2 BYTES
;SUBROUTINES
;	CALLED:	RAND
;
PITCH:	LDA OFFENS		;GET DEFENCE PITCH TYPE
	EOR I,2			;DEFENSE PLAYER
	TAX
	LDA ZX,PLAYNO
	ASL			;*2
	TAY
	LDA AY,PTAB+1		;HI BYTE OF CASE STATEMENT
	PHA
	LDA AY,PTAB		;LOW BYTE OF CASE STATEMENT
	PHA
	RTS
PTAB:	.WORD P.FB-1,P.CU-1,P.CB-1,P.KB-1
P.FB:	LDA I,FBSPD		;SET FAST BALL SPEED
	STA SPEED
	RTS
P.CU:	LDA A,BHPOSH
	CMP I,5D
	BNE 2$
	LDA I,FBSPD		;SET CHANGE UP START SPEED
	STA SPEED
	BNE P.RET0
2$:	LDA PINFO		;SLOW BALL DOWN YET?
	CMP A,BHPOSH
	BCC P.RET0		;NO
	LDA I,CHUSPD		;YES
	STA SPEED
P.RET0:	RTS

P.CB:	LDA I,CRVSPD		;SET CURVE BALL SPEED
	STA SPEED
	LDA PINFO		;START BALL CURVING?
	CMP A,BHPOSH
	BCC P.RET0		;NO
	LDX OFFENS		;YES, CURVE WHICH WAY?
	LDA ZX,PLAYNO
	LSR			;CARRY SET=LEFTY AT BAT
	BCS 10$			;LEFTY
	INC ANGLE		;CURVE BALL AWAY FROM RIGHTY
	BNE P.RET0
10$:	DEC ANGLE
	BNE P.RET0
P.KB:	LDA I,KBSPD		;SET KNUCKLE BALL SPEED
	STA SPEED
	JSR RAND		;GET RANDOM NUMBER
	LSR
	LSR
	LSR
	LDY I,0			;COUNT # OF 1'S IN 2 LSB'S
	ROR
	BCC 1$
	INY
1$:	ROR
	BCC 2$
	INY
2$:	TYA			;HAVE WEIGHTED RANDOM # (0-2)
	ROR
	BCS 6$			;BALL GOES STRAIGHT
	ROR
	BCS 4$			;BALL GOES LEFT
	BIT BALFLG		;BALL GOES RIGHT
	BMI P.RET		;BALL ALREADY GOING RIGHT
	LDA I,ANGL45		;45 DEGREES
	BVC 3$			;IF BALL GOING STRAIGHT
	ASL			;MAKE IT 90 DEG
3$:	ADC ANGLE		;CHANGE ANGLE TO GO RIGHT
	STA ANGLE
	LDA BALFLG		;SET GOING RIGHT FLAG
	AND I,3F
	ORA I,KBRFLG
	STA BALFLG
	RTS
4$:	BIT BALFLG
	BVS P.RET		;BALL ALREADY GOING LEFT
	LDA ANGLE
	SBC I,ANGL45
	BIT BALFLG
	BPL 5$			;HAD BEEN GOING STR
	SEC
	SBC I,ANGL45
5$:	STA ANGLE
	LDA BALFLG
	AND I,3F
	ORA I,KBLFLG
	STA BALFLG
	RTS

6$:	LDA ANGLE		;CORRECT ANGLE
	BIT BALFLG
	BMI 7$			;BALL GOING RIGHT
	BVC P.RET		;BALL GOING STRAIGHT - RETURN
	CLC			;BALL GOING LEFT - STRAIGHTEN
	ADC I,ANGL45
	JMP 8$
7$:	SBC I,ANGL45
8$:	STA ANGLE
	LDA BALFLG		;SET BALL GOING STRAIGHT
	AND I,3F
	STA BALFLG
P.RET:	RTS
	.PAGE
	.SBTTL HIT CHECK
;
;BLOCK NAME:	HITCHK
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	HITCHK WILL DETERMINE COLLISION BETWEEN BALL AND BAT AND THEN
;		SET UP THE SPEED AND ANGLE FOR THE BALL BASED ON THE SPEED OF
;		THE PITCH, THE SPEED OF THE BAT AND THE BALL POSITION AT TIME
;		OF COLLISION.
;
;INPUT PARAMS:	THRESHOLD TABLE (THRSHD), BALL POSITION (BHPOS,BVPOS) AND BAT
;		STAMP #.
;OUTPUT PARAMS:	NEW VALUES FOR SPEED AND ANGLE
;REGISTER USED:	A,X,Y
;STACK USAGE:	NONE
;
HITCHK:	LDA BSTMP		;GET CURRENT BAT STAMP #
	AND I,0F
	ASL			;*4
	ASL
	TAY			;USE AS INDEX TO THRESHOLD TBL
	LDX OFFENS
	LDA ZX,PLAYNO
	LSR
	LDA I,0
	BCC 50$			;IF RIGHTY BRANCH
	LDA AY,THRSHD+1
	SBC I,7E		;LEFT JUSTIFY VERTICAL COLLISION TBL
50$:	STA TEMP1
	LDA AY,THRSHD		;CHECK BALL INSIDE OR OUTSIDE
	SEC
	SBC TEMP1
	CMP A,BVPOS
	BCC 3$			;BALL INSIDE OR OUTSIDE
	LDA AY,THRSHD+1
	SBC TEMP1
	CMP A,BVPOS
	BCS 3$			;BALL INSIDE OR OUTSIDE
	LDA A,BHPOSH		;BALL HORIZ POS
	CMP AY,THRSHD+2		;(RIGHT HAND HORIZ THRESHOLD)
	BCS 3$			;NOT THERE YET (OR TOO FAR)
	CMP AY,THRSHD+3		;(LEFT HAND HORIZ THRESHOLD)
	BCS 5$
3$:	CLC
	RTS
5$:	LDA I,40		;CRACK OF BAT
	STA CRACK
	LDA I,0C8
	LDX OFFENS
	BEQ 6$
	LDA I,08
6$:	STA A,MOBJ+<BATTER*2>
;CALCULATE ANGLE OF BALL TRAVEL
	JSR RAND
	LSR
	AND I,7
	STA TEMP1
	LDA BSTMP
	AND I,0F
	TAY
	LDX OFFENS
	LDA ZX,PLAYNO
	LSR
	LDA AY,BATNGL
	BCC 7$			;IF RIGHT, BR
	EOR I,0FF		;NEGATE ANGLE
	ADC I,0
7$:	LDY OFFENS
	BEQ 1$
	EOR I,80		;COMPLIMENT ANGLE
1$:	SEC
	SBC TEMP1
	ASL			;DOUBLE
	SEC
	SBC ANGLE		;ANGLE INC=ANGLE REFLECT
	STA ANGLE
	BMI 15$			;WHICH OUTFIELDER GETS BALL
	SEC
	SBC I,8
	BMI 18$
	LDA I,7*2		;LEFT
	BNE 19$
15$:	CLC
	ADC I,0B
	BPL 18$
	LDA I,9*2		;RIGHT
	BNE 19$
18$:	LDA I,8*2		;CENTER
19$:	STA FLDBAL
	LDA A,BGOALH+2		;SET BATTER'S GOALS TO FIRST BASE
	STA A,HGOAL+<BATTER*2>
	LDA A,BGOALV+2
	STA A,VGOAL+<BATTER*2>
	LDX I,SSTOP*2		;START WITH PITCHER
21$:	LDA AX,IVGOAL		;SET UP GOALS FOR INFIELDERS
	STA AX,VGOAL
	LDA AX,IHGOAL
	STA AX,HGOAL
	DEX
	DEX
	BNE 21$
;DETERMINE WHICH INFIELDER GETS BALL
	LDX OFFENS
	LDY I,1			;START WITH PITCHER
	LDA ZX,PLAYNO
	LSR
	LSR
	BCS 20$			;BRANCH IF BUNT - BALL GOES TO PITCHER
	INY
	INY			;SKIP CATCHER
	LDA ANGLE		;DETERMINE QUADRANT
	BPL 10$			;LEFT SIDE
	ADC I,14
	BMI 20$			;1ST BASEMAN'S BALL
	INY
	BNE 20$			;SECOND BASEMAN'S BALL
10$:	INY
	INY
	SBC I,13
	BPL 20$			;3RD BASEMAN
	INY			;SHORT STOP
20$:	TYA
	ASL			;MAKE INDEX
	STA TOBALL
	.REPT 0
	CMP I,<FIRSTB*2>
	BNE 25$
	LDA A,IVGOAL+<FIRSTB*2>	;MOVE PITCHER TO COVER FIRST
	SBC I,4			;OFFSET A LITTLE
	STA A,VGOAL+<PITCHER*2>
	LDA A,IHGOAL+<FIRSTB*2>
	SBC I,4
	STA A,HGOAL+<PITCHER*2>
	BNE 30$
	.ENDR
25$:	CMP I,<THIRDB*2>	;THIRD BASEMAN'S BALL?
	BNE 30$			;NO
	LDA A,IVGOAL+<THIRDB*2>	;YES, SHORT STOP COVERS 3RD
	ADC I,4			;OFFSET A LITTLE
	STA A,VGOAL+<SSTOP*2>
	LDA A,IHGOAL+<THIRDB*2>
	ADC I,4
	STA A,HGOAL+<SSTOP*2>
;DETERMINE WHERE TO INTERCEPT BALL
30$:	LDA TOBALL
	LSR
	LSR
	BEQ H.40			;IF PITCHER, DON'T DO ANYTHING
	BCC 32$			;2ND BASEMAN OR SHORT STOP
	LDA I,60		;1ST OR  3RD BASEMAN
	BNE 33$
32$:	LDA I,80
33$:	STA IJ			;SAVE DISTANCE
	LDA ANGLE
	JSR COS			;COSINE OF ANGLE
	LDX IJ
	JSR MULT		;GET HORIZONTAL GOAL
	LDX TOBALL		;INDEX TO PLAYER
	TYA
	ASL
	ADC A,BHPOSH		;NORMALIZE
	STA AX,HGOAL		;SET UP HORIZ GOAL
	LDA ANGLE
	JSR SIN
	LDX IJ
	JSR MULT		;GET VERTICAL GOAL
	LDX TOBALL		;INDEX
	TYA
	ASL
	EOR I,80		;OFFSET FROM CENTER
	STA TEMP1
	LDA BVPOS
	SEC
	SBC I,84
	ADC TEMP1
	STA AX,VGOAL		;SET UP VERTICAL GOAL
;CALCULATE NEW BALL SPEED
	LDX OFFENS		;REFRESH OFFENSE INDEX
H.40:	LDY ZX,PLAYNO		;GET SWING SPEED
	TXA
	EOR I,2			;DEFENSE
	TAX
	TYA			;SWING SPEED
	AND I,2
	ASL
	CLC
	ADC ZX,PLAYNO		;ADD IN PITCH
	TAX
	LDA AX,SPDTBL		;GET BALL SPEED
	STA SPEED
H.RET:	LDA I,HITFLG
	ORA BALFLG
	STA BALFLG
	INC INSPDX		;INCREASE INFIELDER CAPABILITY
	SEC			;INDICATE HIT
	RTS
	.PAGE
	.SBTTL SWING ROUTINE
;
;BLOCK NAME:	SWING
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	SWING WILL CONTROL THE MOTION OBJECT STAMP WHICH REPRESENTS
;		THE BAT BASED ON THE VALUE OF STYPE (PLAYNO).
;		WHERE STYPE:
;			0 = FAST SWING
;			1 = SLOW SWING
;			2 = HIT & RUN
;			3 = BUNT
;
;INPUT PARAMS:	NONE (STYPE IS GLOBAL)
;OUTPUT PARAMS:	BAT STAMP MODIFIED (MAYBE)
;REGISTER USED:	A,X,Y
;STACK USAGE:	2 BYTES
;SUBRT'S CALLED:BUTTON
;
SWING:	LDA SSTART		;SWING STARTED
	BMI 20$
	BNE S.DOIT		;YES, SKIP THIS CRAP
	LDX OFFENS
	JSR OFENSE		;COMPUTER AT BAT?
	BCS 10$			;YES
	BIT ATRACT		;ATTRACT MODE
	BMI 30$			;NO
10$:	JSR RAND		;GET RANDOM VALUE
	AND I,0F
	STA IJ
	LDA I,STCRV1
	SBC IJ			;NOW HAVE RANDOM BALL POSITION TO START SWING
	CMP A,BHPOSH		;START IT YET?
	BCC S.RET		;NO
	TXA			;YES
	EOR I,2
	TAY
	LDA AY,PLAYNO		;TAKE OCCASIONALLY ON K.B.
	EOR I,3
	BNE 12$
	LDA INTCNT
	BPL 12$
	STA SSTART
20$:	BMI S.RET
12$:	JSR RAND
	AND I,3
	BEQ 40$
	LDA ZX,PLAYNO
	AND I,0FD
	STA ZX,PLAYNO		;DON'T BUNT SO MUCH
	JMP 40$
30$:	JSR BUTTON
	BEQ S.RET		;SWING BUTTON NOT PUSHED YET
40$:	INC SSTART		;START SWING
	LDA ZX,PLAYNO		;BUNT OR SWING AWAY?
	AND I,2
	BNE S.BUNT

S.FS:	LDA I,FSLAST		;LAST STAMP
	STA TMASK
	BNE S.DOIT		;***ALWAYS
S.BUNT:	LDA I,BLAST		;LAST STAMP
	STA TMASK
S.DOIT:	LDA BSTMP		;GET CURRENT BAT STAMP
	BEQ S.RET
	TAY
	AND TMASK		;LAST STAMP?
	CMP TMASK
	BEQ 6$			;YES, JUST RETURN
	INY			;NEXT STAMP
	TYA
	AND I,0F		;CHANGE STAMP POS YET?
	CMP I,7
	BNE 4$			;NO, SKIP CRAP
	LDA BTHPOS		;GE CURRENT BAT POSITION
	STA TEMP1
	LDA I,0FF		;MOWE BAT OFF SCREEN
	STA BTHPOS
	STY BSTMP		;UPDATE STAMP #
	LDA TEMP1		;INCREMENT BAT POSITION BY 8
	CLC
	ADC I,8
	STA BTHPOS
	BNE S.RET			;***ALWAYS
4$:	STY BSTMP
	BNE S.RET		;*** ALWAYS
6$:	LDX I,0			;ZERO OUT BPOS
	LDA I,HITFLG
	BIT BALFLG		;HE HASNT HIT IT YET
	BEQ S.RET
	STX BSTMP		;GET RID OF BAT
S.RET:	RTS
CKS2:	.BYTE 95
	.SBTTL FLITE ROUTINE
;
;BLOCK NAME:	FLITE
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	THIS SECTION OF CODE WILL CONTROL THE ACTUAL POSITION UPDATING
;		OF THE BALL USING SPEED, ANGLE AND UPDATE ANGLE ON A WALL
;		BOUNCE.
;INPUT PARAMS:	ANGLE, SPEED
;OUTPUT PARAMS:	MOTION OBJECT 0'S POSITION IS UPDATED
;	CARRY IS SET FOR HOMERUN OR TRIPLE.  HOMRUN = POSITIVE FOR
;	TRIPLE ZERO OTHERWISE
;REGISTER USED:
;SUBROUTINES
;	CALLED:	MULT, SINE, COS, SHIFT, LSHIFT
;STACK USAGE:	2 BYTES FOR SUBROUTINE CALLS
;
FLITE:	LDA SPEED
	BEQ 1$
	AND I,0FC
	BNE 2$
1$:	CLC		;BALL STOPPED OR CAUGHT
	RTS
2$:	LDA ANGLE		;COSINE OF ANGLE
	JSR COS
	TAY			;SAVE COS
	LDA SPEED
	LSR
	LSR
	LSR
	LSR
	TAX			;SET UP FOR MULT
	TYA
	JSR MULT		;GIVES HORIZ INCREMENT
	LDA A,BHPOSL		;SHIFT CURRENT HORIZ POS RIGHT 1 BIT
	STA TEMP1
	LDA A,BHPOSH
	STA TEMP2
	JSR SHIFT1
	AND I,7F		;GET RID OF ANY SIGN
	STA A,BHPOSH
	TXA			;GET LSB OF HORIZ INC
	CLC
	ADC TEMP1		;INCREMENT
	STA TEMP1
	TYA
	ADC A,BHPOSH
	PHP			;SAVE MINUS FLAG TO SEE IF BOUNCED
	JSR LSHFT1
	STA A,BHPOSH		;NEW HORIZ POS
	LDA TEMP1
	STA A,BHPOSL
	PLP
	BMI 5$			;BOUNCE
	LDA A,BHPOSH
	JSR BCHECK
	BCC 10$
5$:	LDA TEMP2
	STA A,BHPOSH
	LDA I,NGL180		;BOUNCE CHANGE ANGLE
	SEC
	SBC ANGLE
	STA ANGLE
	LDA I,1			;INDICATE BOUNCE
	BNE 11$
10$:	LDA I,0			;NO BOUNCE
11$:	STA IJ			;SAVE
	LDA ANGLE		;SINE OF ANGLE
	JSR SIN
	TAY			;SAVE SW
	LDA SPEED
	LSR
	LSR
	LSR
	LSR
	TAX			;SET UP FOR MULT
	TYA
	JSR MULT
	LDA A,BVPOSL		;SHIFT CURRENT VERT POS RIGHT
	STA TEMP1
	LDA A,BVPOS
	STA TEMP2
	JSR SHIFT1
	AND I,7F		;GET RID OF PROPOGATED SIGN
	STA A,BVPOS
	TXA			;GET LSB OF SINE X SPEED
	CLC
	ADC TEMP1		;ADD LSB OF SHIFTED VERT POS
	STA TEMP1
	TYA
	ADC A,BVPOS		;ADD MSB'S
	PHP			;SAVE MINUS FLAG FOR BOUNCE
	JSR LSHFT1		;NEW BALL VERT POS
	STA A,BVPOS
	LDA TEMP1
	STA A,BVPOSL
	PLP			;RETURN OLD STATUS
	BMI 15$			;BOUNCE
	LDA A,BVPOS
	JSR BVCHEK
	BCC 16$			;NO BOUNCE
15$:	LDA TEMP2
	STA A,BVPOS
	LDA I,0			;TAKE NEGATIVE OF ANGLE
	SEC
	SBC ANGLE
	STA ANGLE
	LDA I,1			;INDICATE BOUNCE
	BNE 17$
16$:	LDA I,0
17$:	ORA IJ
	BEQ SP.RET		;NO BOUNCE
	JSR FOULCK
	BCS SP.FOUL		;FOUL BALL
	LDA FAIR
	BNE SP.RET
	INC FAIR
	LSR SPEED
	LDA A,BVPOS		;GET BALL
	SBC I,84
	BPL 30$			;CENTER OF FIELD
	CLC			;ABS VALUE
	EOR I,0FF
	ADC I,1
30$:	CMP I,17
	BCS 35$			;NOT HOMER
	INC HOMRUN		;HOMER
	LDA I,240.
	STA CHEER
	LDA I,M.HR
	BNE SPECL
35$:	SBC I,50
	CMP I,19
	BCS SP.RET
	LDA MISSED		;MISSED A BASE
	BNE SP.RET
	LDA I,0F0		;INDICATE TRIPLE
	STA HOMRUN
	LDA I,0A0
	STA CHEER
	LDA I,M.TRPL
SPECL:	JSR WRITEB
	LDA I,0
	STA SPEED
	STA A,MOBJ+1C		;ZILCH BALL OVER FENCE
	BIT ATRACT		;GAME MODE?
	BPL 10$			;NO, ATRACT MODE
	LDX BASE		;YES, TURN RUNNER TO DRONE
	INX
	STX MOVE
	TXA
	ASL
	TAX
	LDA AX,BGOALH
	STA A,HGOAL+<BATTER*2>
	LDA AX,BGOALV
	STA A,VGOAL+<BATTER*2>
10$:	SEC
	RTS
SP.FOUL:LDA I,FOUL
	ORA BALFLG		;ELSE SET FOUL
	STA BALFLG
SP.RET:	CLC			;NOTHING UNTOWARD
	RTS			;ALL DONE
	.PAGE
	.SBTTL CATCH ROUTINE
;
;BLOCK NAME:	CATCH
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	CATCH WILL DETERMINE IF THE BALL HAS PASSED THE BATTER 
;		SUFFICIENTLY TO BE CAUGHT BY THE CATCHER.  IN THE FUTURE
;		IT WILL ALSO DETERMINE A BALL, STRIKE, WP OR HB.  IN THE
;		THE CASE OF A CATCH, IT SETS THE CATCH FLAG.
;
;INPUT PARAMS:	CATCHER POSITION AND BALL POSITION
;OUTPUT PARAMS:	CARRY SET AND SPEED IF CATCH
;REGISTER USED:	A,X,Y
;STACK USAGE	NONE
CATCH:	LDA A,HPOSH+<CATCHER*2>
	SEC
	SBC A,BHPOSH		;HORIZONTAL POXIMITY TO CATCHER
	BMI 2$			;PAST CATER
	CMP I,-PROX		;BALL CLOSE ENOUGH?
	BCS 6$			;NO - CHECK BALL OR STRIKE
	BCC 3$
2$:	CMP I,PROX
	BCC 10$
3$:	LDA A,VPOS+<CATCHER*2>
	SEC
	SBC A,BVPOS
	BCC 5$			;IF NEG, DON'T NEGATE
	EOR I,0FF
	ADC I,0
5$:	CMP I,PROX
	BCC C.RET		;NOT WILD PITCH TILL PAST CATCHER
6$:	LDA I,0CC		;CATCH SOUND
	STA THUD
	SEC
	RTS
;
;MOVE CATCHER, CHECK FOR BALLS & STRIKES
;
10$:	LDA SSTART
	BEQ 20$
	BMI 20$
	LDA I,1			;ITS A STRIKE
	STA CALL		;MOVE CATCHER
20$:	LDA OFFENS		;GET DEFENSE
	EOR I,2
	TAX
	LDA ZX,PLAYNO
	ASL
	TAY
	LDA AY,CTAB+1		;DO CASE
	PHA
	LDA AY,CTAB
	PHA
	RTS
CTAB:	.WORD C.STRK-1,C.STRK-1,C.CURV-1,C.KB-1
C.KB:	LDA A,BHPOSH
	SBC I,22
	BPL C.CALL
C.CURV:	LDA A,BVPOS		;MOVE CATCHER
	CMP A,VPOS+<CATCHER*2>
	BEQ C.CALL
	STA A,VPOS+<CATCHER*2>
	LDA I,4
	ORA BITMAP		;MOVE LEGS
	STA BITMAP
C.CALL:	LDA CALL		;DON'T CHANGE A STRIKE
	BNE C.RET
	LDA A,BHPOSH		;BALL IN STRIKE ZONE?
	SEC
	SBC I,21
	BCS 10$
	EOR I,0FF		;ABS VALUE
	ADC I,1
10$:	CMP I,4
	BCS C.RET		;NOT IN STRIKE ZONE YET
	LDA A,BVPOS
	SBC I,83
	BCS 20$
	EOR I,0FF		;ABS VALUE
	ADC I,1
20$:	CMP I,4
	BCS C.CHK		;NOT IN STRIKE ZONE
C.STRK:	LDA I,1
	STA CALL
C.RET:	CLC			;BALL NOT CAUGHT YET
	RTS
C.CHK:	LDX OFFENS
	LDA ZX,PLAYNO
	LSR
	LDA I,80
	BCS 10$			;LEFTY
	LDA I,8E		;RIGHTY
	SEC
10$:	SBC A,BVPOS
	BMI C.RET
	CMP I,6
	BCS C.RET
	LDA I,-1		;HIT BATSMAN
	STA CALL
	SEC
	RTS
	.PAGE
	.SBTTL BOUNCE
;
;BLOCK NAME:	BOUNCE
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	BOUNCE WILL SIMULATE # BOUNCING MOTION FOR THE BALL AS WELL
;		AS DECAYING THE SPEED TO ZERO
;INPUT PARAMS:	SPEED AND ANGLE
;OUTPUT PARAMS:	SPEED AND ANGLE
;REGISTER USED:	A,X,Y
;STACK USAGE:
;
;TEMPORARILY WILL JUST DECAY THE SPEED
;
BOUNCE:	LDA SPEED		;GET SPEED
	CLC
	TAY
	ADC I,3F		;ADD 3F
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	STA TEMP1		;SAVE
	TYA			;SPEED
	SEC
	SBC TEMP1		;SPEED - ((SPEED+15)/16)
	STA SPEED
	AND I,0FC
	BNE 10$			;IF BALL HASNT STOPPED
	LDA BATOUT		;DON'T CALL LINE OUT FOUL
	BNE 10$
	JSR FOULCK
	BCC 10$			;BALL NOT FOUL
	LDA I,FOUL		;SET FOUL
	ORA BALFLG
	STA BALFLG
10$:	RTS
	.PAGE
	.SBTTL MOVE OBJECT LEGS
	
;BLOCK NAME:	MOVLEG
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	MOVLEG WILL FIRST LOCK OUT
;			THE MOITION OBJECT UPDATE IN THE INTERRUPT
;			ROUTINE AND THEN TOGGLE THE ONE BIT
;			OF THE PICTURE STAMP # FOR EVERY MOTION
;			OBJECT INDICATE IN THE 2 BYTE BIT MAP
;
;INPUT PARAMS:	BITMAP (2 BYTES)
;OUTPUT PARAMS:	MOTION OBJECT STAMPS UPDATED
;REGISTER USED:	A,X
;STACK USED:	NONE
;
MOVLEG:	LDA FRAME
	AND I,03		;EVERY 4TH FRAME ONLY
	BNE 5$
	LDY I,8			;8 OBJ'S IN FIRST BYTE
	STA SLOCK		;LOCK OUT INTERRUPT
	LDX I,0
1$:	LDA I,1			;SET UP FOR EOR
	LSR BITMAP
	BCC 2$			;NO UPDATE
	EOR AX,MOBJ		;UPDATE STAMP
	STA AX,MOBJ
2$:	INX
	INX
	DEY
	BNE 1$
	LDY I,8			;8 OBJ'S IN 2ND BYTE
3$:	LDA I,1			;SET UP FOR EOR
	LSR BITMAP+1
	BCC 4$			;NO UPDATE
	EOR AX,MOBJ		;UPDATE STAMP
	STA AX,MOBJ
4$:	INX
	INX
	DEY
	BNE 3$
	LDX HASBAL		;FLASH MAN WITH BALL
	BEQ 6$
	LDA AX,MOBJ
	AND I,0C0		;PRESERVE FLAGS
	STA AX,MOBJ
	LDA I,0			;UNLOCK INTERRUPT
	STA SLOCK
	RTS			;RETURN
5$:	LDX HASBAL
	BEQ 6$
	LDA AX,MOBJ
	ORA I,0A
	STA AX,MOBJ
6$:	RTS
	.PAGE
	.SBTTL TRACK BALL RUNNER
	
;BLOCK NAME:	BATRUN
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	THIS ROUTINE WILL UPDATE THE POSITION
;			OF THE BATTER AS A RUNNER BASED ON OFFENSIVE
;			TRACK BALL INPUT AND SLIDE CONDITION
;
;INPUT PARAMS:	THINC,TVINC
;OUTPUT PARAMS:	H & V POSITION OF RUNNER (BATTER)
;REGISTERS USED: A,X
;SUBROUTINE USED:	TBALL,BUTTON
;STACK USED	NONE ADDITIONAL
;
BATRUN:	BIT ATRACT
	BPL 50$			;IN ATRACT
	JSR OFENSE
	BCS 50$			;COMPUTER AT BAT
	LDA MOVE
	BNE 50$
	BIT SLIDE
	BMI 1$			;SLIDING!
	LDA I,SLDVAL
	CMP SLIDE
	BEQ 1$			;NORMAL MOVEMENT
	INC SLIDE
	CMP SLIDE
	BNE 50$			;STOPPED AFTER SLIDE
	LDA A,MOBJ+<BATTER*2>	;CHANGE TO RUNNER
	AND I,0C0
	BIT SAVE1
	BPL 55$
	EOR I,40
55$:	LDX OFFENS
	ORA I,08
	STA A,MOBJ+<BATTER*2>
	BNE 15$			;ALWAYS
50$:	RTS
1$:	LDX OFFENS	;GET H & V INCREMENTS
	JSR TBALL
	BIT SLIDE
	BMI 20$
	LDA BASE		;TO FIRST YET?
	BEQ 18$			;YES, DONT ALLOW SLIDE
15$:	JSR BUTTON		;BUTTON PUSHED?
	BNE 16$			;YES
18$:	LDA THINC		;NO
	ORA TVINC
	BEQ 25$			;DON'T MOVE LEGS
	LDA I,4			;MOVE LEGS
	ORA BITMAP+1
	STA BITMAP+1
	BNE 25$			;ALWAYS
16$:	LDA I,-SLDVAL
	STA SLIDE
	LDA A,MOBJ+<BATTER*2>	;CHANGE TO SLIDER PICTURE
	AND I,0C0
	BIT THINC+1		;THIS ALL WORKED THRU TRIAL & ERROR
	BPL 17$
	EOR I,40
17$:	ORA I,0E
	STA A,MOBJ+<BATTER*2>
	LDA THINC+1
	STA SAVE1		;SAVE SIGN OF LAST HORIZ INCREMENT
	LDA BITMAP+1
	AND I,0FB
	STA BITMAP+1
20$:	INC SLIDE
	LDA THINC		;DOUBLE SPEED
	STA TEMP1
	LDA THINC+1
	JSR LSHFT1
	STA THINC+1
	LDA TEMP1
	STA THINC
	LDA TVINC
	STA TEMP1
	LDA TVINC+1
	JSR LSHFT1
	STA TVINC+1
	LDA TEMP1
	STA TVINC
25$:	LDA A,HPOSL+<BATTER*2>		;INCREMENT H POS
	CLC
	ADC THINC
	STA A,HPOSL+<BATTER*2>
	LDA A,HPOSH+<BATTER*2>
	ADC THINC+1
	JSR BCHECK
	BCS 26$
	STA A,HPOSH+<BATTER*2>
26$:	LDA A,VPOSL+<BATTER*2>		;INCREMENT V POS
	CLC
	ADC TVINC
	STA A,VPOSL+<BATTER*2>
	LDA A,VPOS+<BATTER*2>
	ADC TVINC+1
	JSR BVCHEK
	BCS 27$
	STA A,VPOS+<BATTER*2>
27$:	LDA SLIDE
	BMI B.RET
	BEQ B.RET
	LDA TVINC+1		;NOT SLIDING, ANY VERT CHANGE?
	BNE 30$			;YES
	LDA TVINC
	BNE 30$			;YES
	RTS
30$:	TXA
	ROR
	ROR
	ROR
	EOR TVINC+1
	BMI 35$			;DID HE CHANGE VERT DIRECTIONS?
	LDA I,7F		;ADJUST RUNNER DIRECTION
	AND A,MOBJ+<BATTER*2>
	BNE 40$			;ALWAYS
35$:	LDA I,80		;ADJUST RUNNER DIRECTION
	ORA A,MOBJ+<BATTER*2>
40$:	STA A,MOBJ+<BATTER*2>
B.RET:	RTS
CKS3:	.BYTE 89
	.PAGE
	.SBTTL FIELDER MOTION (TRACK BALL)
	
;BLOCK NAME:	FIELD
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	FIELD WILL DETERMINE WHICH
;			FIELDER (IF ANY) ARE UNDER CONTROL OF THE
;			TRACK BALL AND MOVE THEM ACCORDINALY
;
;INPUT PARAMS:	FLDCTL (3 BYTE ARRAY), THINC,TVINC
;OUTPUT PARAMS:	H & V POSITIONS OF FIELDERS UPDATED
;REGISTERS USED: A,X,Y
;SUBROUTINE USED: TBALL
;STACK USED:	NONE ADDITIONAL
;
FIELDR:	JSR DEFENS		;COMPUTE ON DEFENSE?
	BCS 8$			;YES, LIKE ATTRACT
	BIT ATRACT
	BMI 7$
8$:	JMP F.ATRC
7$:	LDA FLDCTL		;ANY FIELDERS TO CONTROL?
	BEQ 2$			;NO
	LDA OFFENS		;GET DEFENSE IN X
	EOR I,2
	TAX
	JSR TBALL		;SET UP H & V INCREMENTS
	LDY I,0			;AT MOST 3 PLAYERS CONTROLLED
1$:	LDX AY,FLDCTL		;GET CONTROLLED PLAYER
	BNE 5$
2$:	JMP F.RET
5$:	LDA THINC
	BNE 3$
	LDA TVINC
	BEQ 10$			;NO
3$:	JSR FLDLEG
10$:	CLC
	LDA THINC		;INCREMENT HPOS
	ADC AX,HPOSL
	STA AX,HPOSL
	LDA THINC+1
	ADC AX,HPOSH
	JSR BCHECK			;CHECK FOR OUT OF BOUNDS
	BCS 15$
	STA AX,HPOSH
15$:	CLC
	LDA TVINC		;INCREMENT VPOS
	ADC AX,VPOSL
	STA AX,VPOSL
	LDA TVINC+1
	ADC AX,VPOS
	JSR BVCHEK		;CHECK FOR OUT OF BOUNDS
	BCS 20$
	STA AX,VPOS
20$:	LDA THINC		;FIELDERS MOVE AT 1 1/2 SPEED LIMIT
	STA TEMP1
	LDA THINC+1
	JSR SHIFT1
	STA TEMP2
	LDA AX,HPOSL		;UPDATE HORIZ
	CLC
	ADC TEMP1
	STA AX,HPOSL
	LDA AX,HPOSH
	ADC TEMP2
	JSR BCHECK
	BCS 25$
	STA AX,HPOSH
25$:	LDA TVINC
	STA TEMP1
	LDA TVINC+1
	JSR SHIFT1
	STA TEMP2
	LDA AX,VPOSL		;UPDATE VERT
	CLC
	ADC TEMP1
	STA AX,VPOSL
	LDA AX,VPOS
	ADC TEMP2
	JSR BVCHEK
	BCS 40$
	STA AX,VPOS
40$:	INY
	CPY I,3			;ALL DONE?
	BEQ F.RET
	JMP 1$			;NOPE!
F.ATRC:	LDA A,BHPOSH		;BALL OUT OF INFIELD?
	CMP I,INMAX
	BCC F.RET		;NO
	LDX FLDBAL		;MOVE OUTFIELDER TO BALL
	LDA A,BHPOSH
	STA AX,HGOAL
	LDA A,BVPOS
	STA AX,VGOAL
	JSR DIRECT
	LDA I,0
	JSR SPDLIM
	JSR UPDTHV
	LDA TVINC+1
	ORA THINC+1
	BEQ F.RET
	JSR FLDLEG
F.RET:	RTS
;ENTERED WITH X->PLAYER, A=TBVD(X), THINC=TBHD(X)
X.LIM:	.BYTE 28
X.TBLIM:TAY			;SAVE V
	BPL 1$			;TAKE ABS VAL
	EOR I,0FF
	CLC
	ADC I,1
1$:	CMP A,X.LIM		;!V! < X.LIM?
	BCC 2$			;YES, LEAVE IT
	LDA A,X.LIM		;ELSE USE X.LIM
2$:	CPY I,80		;CHECK IF ORIG WAS +
	BCC 3$			;BRANCH IF SO
	EOR I,0FF		;ELSE MAKE - X.LIM
	ADC I,0			;CARRY SET, ADDS 1
3$:	STA TVINC
	LDA THINC		;GET THINC AND REPEAT
	TAY			;THE PROCESS
	BPL 4$
	EOR I,0FF
	CLC
	ADC I,1
4$:	CMP A,X.LIM
	BCC 5$
	LDA A,X.LIM
5$:	CPY I,80
	BCC 6$
	EOR I,0FF
	ADC I,0
6$:	STA THINC		;SAVE H
	LDA TVINC		;GET BACK V
	RTS			;AND REJOIN MAIN
TBALL: LDY I,0
	LDA ZX,TBHD		;WE HAVE A 4 CYCLE HAZARD HERE
	STY ZX,TBHD		;WHICH I THINK WE WILL HAVE TO LIVE WITH
	LDY OFFENS		;MUST PRE-INVERT FOR OFFENSE #2
	BEQ 5$
	EOR I,0FF
	CLC
	ADC I,1
5$:	STA THINC		;SAVE LSB'S OF TBHP(X)
	LDY I,0
	LDA ZX,TBVD
	STY ZX,TBVD		;SAME HAZARD HERE
	LDY OFFENS
	BEQ 10$
	EOR I,0FF
	CLC
	ADC I,1
10$:	JSR X.TBLIM
	ASL
	ROL
	ROL			;(TBVD(X))*8 IN ACC,C
	TAY			;SAVE 5 LSB FOR LS BYTE
	AND I,0F8		;ISOLATE 5 LSB IN MSB'S OF LS BYTE
	STA TVINC
	TYA
	ROL			;FINISH "*8" FOR MS BYTE
	AND I,7			;ISOLATE 3 MSB IN LSB'S OF MS BYTE
	CMP I,4
	BCC 30$
	ORA I,0F8		;SIGN EXTENDED
30$:	STA TVINC+1
	LDA THINC		;SAME FOR THINC
	ASL
	ROL
	ROL
	TAY
	AND I,0F8
	STA THINC
	TYA
	ROL
	AND I,7
	CMP I,4
	BCC 40$
	ORA I,0F8
40$:	STA THINC+1
	RTS
	.PAGE
	.SBTTL FIELDER-BALL COLLISION CHECK
	
;BLOCK NAME:	COLCHK
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	COLCHK WILL DETERMINE IF A COLLISION
;			HAS OCCURED BETWEEN THE BALL & A FIELDER &
;			WILL SET THE FIELD FLAG IN BALFLG IF SO.
;
;INPUT PARMS:	BALL & FIELDER POSITIONS
;OUTPUT PARMS:	UPDATE OF BALFLG
;REGISTERS USED:	A,X,Y
;STACK USED:	NONE
;SUBROUTINE USED: FORCHK
COLCHK:	LDX I,9*2		;START W/RIGHT FIELDER
1$:	LDA A,BHPOSH		;BALL POSITION
	SEC			;HORIZ PROXIMITY
	SBC AX,HPOSH
	BCS 10$			;BR IF ?????
	EOR I,0FF		;GET ABSOLUTE VALUE
	ADC I,1
10$:	CMP I,FPROX
	BCS 20$			;OUTSIDE HORIZ RANGE
	LDA A,BVPOS
	SEC
	SBC AX,VPOS		;GET PROXIMITY
	BCS 15$
	EOR I,0FF		;ABS VALUE
	ADC I,1
15$:	CMP I,FPROX
	BCC 25$			;WE GOT HIM
20$:	DEX
	DEX
	BNE 1$			;NOT DONE YET
	LDX HASBAL
	BEQ 22$
	LDA AX,MOBJ
	ORA I,0A
	STA AX,MOBJ
	LDA I,0
	STA HASBAL
22$:	RTS
25$:	CPX HASBAL		;SAME PLAYER CAN'T CATCH BALL HE THREW
	BEQ 22$
	LDY HASBAL
	BEQ 26$
	LDA AY,MOBJ
	ORA I,0A
	STA AY,MOBJ
26$:	LDA AX,HPOSH
	CMP I,0A8
	BCS 30$			;OUTFIELDER BRANCH
	LDA SPEED		;GET INFIELD MAX SPEED
	CMP INSPDX
	BCS 20$			;NO COLLISION BALL MOVING TOO FAST
	CMP I,50
	BCC 40$			;NO
	BCS 38$			;YES
30$:	LDY FAIR		;BALL BOUNCE YET?
	BNE 40$			;YES
	CMP I,44
	BCC 40$			;NO
38$:	LDA FSTFLD		;NOT FLYBALL
	BNE 40$
	STX TEMP1		;YES, BATTER IS OUT
	INC BATOUT
	INC FLYOUT		;INDICATE FLYOUT
	LDX I,0
	STX FORCE
	JSR PUTOUT		;SEND BATTER BACK TO DUGOUT
	LDX TEMP1
	INC OUTS
40$:	LDA I,0CC		;CATCH SOUND
	STA THUD
	STA THRTMR		;INIT THROW TIMER
	STX HASBAL		;SHOW WHO HAS BALL
	STX FLDCTL		;MAKE HIM CONTROLLED MAN
	LDA FLYOUT		;DON'T SET FOUL ON OUT
	BNE 45$
	JSR FOULCK
	BCC 45$
	LDA I,FOUL		;BALL FOUL WHEN CAUGHT, INDICATE FOUL
	ORA BALFLG
	STA BALFLG
45$:	LDA AX,HPOSH		;MOVE BALL TO CENTER OF GUY THAT HAS IT
	STA A,BHPOSH
	LDA AX,VPOS
	STA A,BVPOS
	LDA I,0
	STA SPEED		;SET BALL SPEED TO 0
	STA FLDCTL+1		;NO OTHERS UNDER TBALL CONTROL
	STA TOBALX
	LDY TOBALL		;MOVE SELECTED INFIELDER BACK TO POSITION
	STA TOBALL
	LDA AY,IVGOAL
	STA AY,VGOAL
	LDA AY,IHGOAL
	STA AY,HGOAL
	LDA I,FLDFLG		;INDICATE BALL FIELDED
	ORA BALFLG
	STA BALFLG
	LDA FSTFLD		;IS THIS THE FIRST FIELDING?
	BEQ 31$			;YES
	CPX I,PITCHER*2
	BNE 49$
	LDA I,PLYEND		;SET PLYEND (TEMP)
	ORA BALFLG
	STA BALFLG
31$:	JSR FORCHK
49$:	INC FSTFLD		;INCREMENT FIELDED COUNT
50$:	RTS
	.PAGE
	.SBTTL FORCE CHECK
;BLOCK NAME: FORCHK
;BLOCK TYPE: SUBROUTINE
;BLOCK DESCRIPTION: FORCHK WILL SET THE MOVE FLAG FOR EACH RUNNER
;		    (EXCEPT BATTER) ACCORDING TO THE FORCE CONDITIONS
;		    AND POSITION OF RUNNERS AT TIME OF CALL
;
;INPUT PARAMS: FORCE & H & V POSITIONS OF RUNNERS
;OUTPUT PARAMS: MOVE ARRAY
;STACK USED: NONE
;
FORCHK:
	LDX I,3			;START WITH 3RD DRONE
5$:	LDA ZX,MOVE
	BMI 50$			;OUT
	BEQ 50$			;HOLDING
	LDA ZX,BASE
	BEQ 50$			;NOT ON BASE
	TAY
	STA ZX,MOVE
	LDA FLYOUT
	BNE 35$
	LDA FORCE
	BEQ 21$			;HAVE RUNNERS TAG UP
	LSR			;GET RID OF FORCE AT 1ST
10$:	LSR
	DEY
	BNE 10$
	BCC 21$			;NO FORCE ON THIS GUY
13$:	TXA
	ASL
	TAY
15$:	INC ZX,MOVE		;MOVE THIS GUY ALONG
	BNE 45$			;NEXT GUY
21$:	LDA HASBAL		;WHO HAS THE BALL
	BNE 22$
	LDA HOMRUN
	BNE 13$			;HR OR TRIPLE
	TXA			;WALK OR HB
	ASL
	TAY
	JMP 45$
22$:	TXA			;BATTER IN ATTRACT?
	BEQ 23$			;CONSERVATIVE!!!
	LDA HASBAL
	SBC I,<SSTOP*2>
	BPL 13$
23$:	TXA			;GET INDEX
	ASL			;*2
	TAY
	LDA ZX,BASE
	LSR			;WHAT BASE
	BEQ 25$			;1ST
	BCC 30$			;2ND
	LDA AY,VPOS+<BATTER*2>	;3RD
	SBC I,0A4		;1/2 WAY?
	BMI 15$			;YES
	BPL 40$			;NO
25$:	LDA AY,VPOS+<BATTER*2>	;1/2 WAY?
	SEC
	SBC I,6A
	BMI 40$			;NO
	BPL 15$			;YES
30$:	LDA AY,VPOS+<BATTER*2>
	SEC
	SBC I,0A2		;1/2 WAY
	BMI 40$			;NO
	BPL 15$
35$:	TXA
	ASL
	TAY
40$:	LDA AY,MOBJ+<BATTER*2>	;FLIP PICTURE
	EOR I,80
	STA AY,MOBJ+<BATTER*2>
45$:	LDA ZX,MOVE		;SET UP RUNNER'S GOALS
	STX TEMP1
	ASL
	TAX
	LDA AX,BGOALH
	STA AY,HGOAL+<BATTER*2>
	LDA AX,BGOALV
	STA AY,VGOAL+<BATTER*2>
	LDX TEMP1
50$:	DEX
	JSR OFENSE
	TXA
	BCS 55$
	BIT ATRACT		;ATTRACT?
	BMI 52$			;GAME
55$:	TXA
	BPL 53$			;BATTER ALSO IN ATTRACT
51$:	RTS
52$:	BEQ 51$			;RUNNERS ONLY
53$:	JMP 5$
	.PAGE
	.SBTTL PUTOUT
;BLOCK NAME:	PUTOUT
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	PUTOUT WILL MAKE RUNNER A DRONE AND SEND HIM TO THE DUGOUT
;INPUT PARAMS:	X=RUNNER #
;REGS USED:	A,X
;
PUTOUT:	LDA I,0
	STA ZX,BASE
	LDA I,0FF
	STA ZX,MOVE		;MAKE RUNNER DRONE TO DUGOUT
	TXA
	ASL
	TAX
	LDA OFFENS
	BNE 10$
	LDA I,48		;CHANGE PICTURE
	BNE 20$
10$:	LDA I,88
20$:	STA AX,MOBJ+<BATTER*2>
	LDA I,HDUGO		;MOVE HIM TO DUGOUT
	STA AX,HGOAL+<BATTER*2>
	LDA I,VDUGO
	STA AX,VGOAL+<BATTER*2>
	LDX I,70		;SMALL CHEER
	LDA MISSED
	BNE 28$
	LDA OMESL		;WAS LAST MESSAGE AN OUT OF SOME KIND
	CMP I,M.OUT
	BEQ 21$			;YES
	CMP I,M.FOUT
	BEQ 21$			;YES
	CMP I,M.LOUT		;NO
	BNE 22$
21$:	LDX I,90		;BIGGER CHEER
	LDA I,M.DP		;DOUBLE PLAY
	BNE 30$			;ALWAYS
22$:	LDA FLYOUT		;FLY OUT?
	BEQ 29$			;NO
	LDA A,BHPOSH
	CMP I,0A0
	BCS 27$			;OUTFIELD
	LDA I,M.LOUT		;INFIELD - LINE OUT
	BNE 30$
27$:	LDA I,M.FOUT		;FLY OUT
	BNE 30$
28$:	LDA I,M.MB		;MISSED BASE
	BNE 30$
29$:	LDA I,M.OUT		;OUT
30$:	STX CHEER
	JSR WRITEB
	LDA I,58		;SAY "YER OUT!"
	STA FLASH
	RTS
	.PAGE
	.SBTTL INFIELD MOTION ROUTINE
;
;BLOCK NAME:	INFLD
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	INFLD WILL CONROL INFIELDER MOTION MOVING EVERY PLAYER TO A
;		PRE-ASSIGNED LOCATION, OR TO THE BALL, DEPENDING ON VARIABLES
;		TOBALL AND HASBAL
;
;INPUT PARAMS:	TOBALL,HASBALL,VGOAL,HGOAL,VPOS,HPOS
;OUTPUT PARAMS:	VPOS,HPOS FOR EACH INFIELDER
;REGS USED:	A
;STACK USAGE:	NONE (DIRECT USES SOME)
;SUBRTNS USED:	DIRECT,SPDLIM,FLDLEG,FORCHK

INFLD:
1$:	LDX I,SSTOP*2		;START WITH SHORT STOP
2$:	BIT ATRACT
	BPL 3$
	CPX HASBAL		;PLAYER HAVE BALL?
	BEQ 50$			;YES, DON'T TRY TO MOVE HIM
3$:	CPX TOBALL		;MOVE THIS ONE TO BALL?
	BNE 10$			;NOPE!
	CPX I,PITCHER*2		;PITCHER TO BALL?
	BEQ 7$			;YES - ZERO IN ON BALL
	LDA A,BHPOSH		;YEP- GET HORIZ POS
	CMP I,INMAX		;BALL OUT OF INFIELD?
	BCC 5$			;NO
	LDA AX,IVGOAL		;YES,RESET GOALS
	STA AX,VGOAL
	LDA AX,IHGOAL
	STA AX,HGOAL
	BNE 10$
5$:	LDA SPEED		;BALL STOPPED?
	AND I,0E0
	BNE 10$			;NO
7$:	LDA A,BHPOSH
	STA AX,HGOAL
	LDA A,BVPOS
	STA AX,VGOAL
10$:	JSR DIRECT		;GET H&V INCREMENT
	LDA I,0
	JSR SPDLIM		;LIMIT SPEED
	JSR UPDTHV		;UPDATE POSITIONS
	LDA TVINC+1
	ORA THINC+1
	BEQ 50$
	JSR FLDLEG		;MOVE LEGS
50$:	DEX
	DEX
	BNE 2$			;NOT DONE
	RTS
	.SBTTL DIRECTION
;SETS HINC & VINC TO DISPLACEMENT FROM (H/V) POS TO (H/V) GOAL
DIRECT:	LDA X,VGOAL
	SEC
	SBC X,VPOS
	PHA			;SAVE DIFFERENCE
	BCC 1$
	EOR I,80		;EOR CARRY,D7
1$:	ASL			;C=C.EOR.D7
	PLA			;GET DIFFERENCE BACK
	BCS 2$			;IF C.EOR.D7=1, SIGN IS OK
	ASL			;ELSE WAS O'FLO, GET ERRONEOUS SIGN
	LDA I,7F		;SET MAX POS.
	ADC I,0			;CHANGE TO MAX NEG IF SIGN WAS MINUS
	EOR I,0FF		;FLIP, CUZ SIGN WAS WRONG
2$:	STA TVINC+1		;VERT. DISPLACEMENT (TEMP, FOR MOVEMENTS)
	LDA I,0
	STA TVINC		;KEEP LSB'S 0
	LDA X,HGOAL
	SEC
	SBC AX,HPOSH
	PHA
	BCC 5$
	EOR I,80
5$:	ASL
	PLA
	BCS 10$
	ASL
	LDA I,7F
	ADC I,0
	EOR I,0FF
10$:	STA THINC+1
	LDA I,0
	STA THINC
	RTS
	.SBTTL SPEED-LIMIT
;SPDLIM - SPEED LIMIT
;
;ENTRY	(THINC,THINC+1) = HPOS DIFFERENCE (SIGNED)
;	(TVINC,TVINC+1) = VPOS DIFFERENCE (SIGNED)
;	(A) = INDEX FOR WHICH SPEED (MULTIPLES OF 10)
;EXIT	(THINC,THINC+1) = HPOS DIFFERENCE IN RANGE
;	(TVINC,TVINC+1) = VPOS DIFFERENCE IN RANGE
SPDLIM:	STX K			;SAVE PLAYER NUMBER
	STA IJ
	LDA THINC+1
	BPL 25$			;HABS=ABS (THINC)
	EOR I,0FF
	CLC
	ADC I,01
25$:	STA J
	LDA TVINC+1
	BPL 30$			;VABS=ABS (TVINC)
	EOR I,0FF
	CLC
	ADC I,01
30$:	LDX I,0		;X POINTS TO MAX
	LDY J
	CMP J
	BEQ 90$			;IF AT 45 DEGREE ANGLE
	BCC 35$			;PICK MAX (HABS,VABS)
	LDX I,2			;HABS IS MAX
	TAY
	LDA J
35$:	ASL
	STA QUOT+1		;QUOTIENT=MIN*2
	STY DIVSOR		;DIVISOR=MAX
	LDA I,1
	LDY IJ
	BEQ 36$
	LDA I,4
36$:	CMP DIVSOR
	BCS 80$			;VALUES ARE GOOD ALREADY
	LDY I,3			;3 DIGITS OF ACCURACY FOR MIN/MAX
40$:	LDA QUOT+1
	SEC
	SBC DIVSOR
	BCC 45$			;NO SUBTRACT
	STA QUOT+1
45$:	ROL QUOT
	ROL QUOT+1
	DEY
	BNE 40$			;LOOP 3 TIMES
	LDA QUOT
	AND I,07
	ASL			;*2 FOR 2 WORD ENTRIES
	ORA IJ
	TAY
	LDA AY,SPDLM1		;GET MAX VALUES
	STA ZX,QUOT		;SAVE MAX SPEED LIMIT (ASSUMES DIVISOR FOLLOWS QUOT)
	TXA
	EOR I,02		;SWITCH TO MINIMUM
	TAX
	LDA AY,SPDLM1+1
	STA ZX,QUOT		;SAVE MIN
60$:	LDA I,0
	STA QUOT+1		;SET MSB OF VABS AND HABS
	STA QUOT+3		;ASSUMED TO BE DIVSOR-A SCRATCH CELL
	LDX I,2
65$:	LDA ZX,THINC+1
	ASL
	LDY ZX,QUOT
	LDA ZX,QUOT+1
	BCC 70$			;WAS POSITIVE
	TYA
	EOR I,0FF
	ADC I,0			;COMPLEMENT VABS OR QUOT
	TAY
	LDA ZX,QUOT+1
	EOR I,0FF
	ADC I,0
70$:	STY ZX,THINC		;LSB/8
	ASL ZX,THINC
	ROL
	ASL ZX,THINC
	ROL
	ASL ZX,THINC
	ROL
	STA ZX,THINC+1		;SCALED CORRECTLY NOW
	DEX
	DEX
	BPL 65$
80$:	LDX K			;RESTORE X=PLAYER NUMBER
	RTS

90$:	LDA I,1
	LDY IJ
	BEQ 95$			;IF SLOW OBJECT
	LDA I,04
95$:	CMP J
	BCS 80$			;LESS THAN SPEED LIMIT RETURN
	LDA AY,SPDLM1
	STA QUOT
	STA QUOT+2
	BNE 60$			;ALWAYS

SPDLM1:	.BYTE 28,0,28,05,28,0A,28,0F	;LIMIT=0 FOR SLOW PLAYERS
	.BYTE 28,14,28,19,28,1E,28,23	;EACH ENTRY REPRESENTS XXXYYYY LINES
	.BYTE 68,0,68,0D,68,1A,68,27	;LIMIT=10 FOR FACT PLAYERS
	.BYTE 68,34,68,41,68,4E,68,5E
CKS4:	.BYTE 46
	.PAGE
	.SBTTL SETUP
	
;BLOCK NAME: SETUP
;BLOCK TYPE: SUBROUTINE
;BLOCK DESCRIPTION: SETUP WILL MOVE THE 9 FIELDERS
;	& THE BATTER TO THEIR INITIAL FIELD POSITIONS
;	FROM WHEREVER THEY ARE. WHEN ALL PLAYERS
;	ARE MOVED, IT WILL RETURN WITH Z FLAG SET,
;	OTHERWISE, Z FLAG CLEAR
;
;INPUT PARMS: CURRENT PLAYER POSITIONS & INITBL, X=STARTING M.O. INDEX
;OUTPUT PARMS: PLAYER POSITIONS & Z FLAG = SET WHEN DONE CLEAR OTHERWISE
;REGISTERS USED: A,X,Y
;SUBROUTINES USED: DIRELT,SPDLIM,FLDLEG,UPDTHV
;STACK USED: NONE
;
SETUP:	LDA I,0			;SET UP TEMP3
	STA TEMP3
10$:	JSR DIRECT		;GET H & V INCREMENTS
	LDA SETFLG		;HAS BUTTON BEEN PUSHED IN PAUSE?
	BNE 20$			;YES, SKIP SPEED LIMIT
	LDA I,10
	JSR SPDLIM
20$:	JSR UPDTHV		;UPDATE H & V POS
	LDA TVINC+1
	ORA THINC+1
	BEQ 30$			;HE'S THERE ALREADY
	STA TEMP3		;INDICATE NOT DONE
	JSR FLDLEG		;MOVE LEG'S
30$:	DEX
	DEX
	BNE 10$			;NOT DONE
	LDA TEMP3		;GET INDICATOR
	RTS
	.PAGE
	.SBTTL UPDATE H & V POSITIONS
;
;BLOCK NAME: UPDTHV
;BLOCK TYPE: SUBROUTINE
;BLOCK DESCRIPTION: UPDATES H & V POSITIONS OF
;	MOTION OBJECT BASED ON THINC & TVINC
;	
;INPUT PARMS: X=INDEX TO MOTION OBJECT,THINC,TVINC
;OUTPUT PARAMS: H & V POSITIONS UPDATED
;REGISTERS USED: A
;STACK USED: NONE
;
UPDTHV:	LDA AX,HPOSL		;UPDATE H LSBS
	CLC
	ADC THINC
	STA AX,HPOSL
	LDA AX,HPOSH		;UPDATE H MSB
	ADC THINC+1
	STA AX,HPOSH
	LDA AX,VPOSL		;UPDATE V LSBS
	CLC
	ADC TVINC
	STA AX,VPOSL
	LDA AX,VPOS		;UPDATE V MSBS
	ADC TVINC+1
	STA AX,VPOS
	RTS
	.PAGE
	.SBTTL FIELDERS LEG MOTION
;
;ENTRY	X=FIELDER # TIMES 2
;
;EXIT	BITMAP IS UPDATED
;	A IS CLOBBERED,TEMP1 AND TEMP2 CLOBBERED CALLS LSHFT1
;
FLDLEG:	STX TEMP2		;SAVE PLAYER #
	TXA
	LSR			;REAL PLAYER #
	TAX
	LDA I,1			;FLAG
	STA TEMP1
	LSR			;ZERO ACCUM
5$:	JSR LSHFT1		;BAT NEVER TOGGLED
	DEX
	BNE 5$			;ALL DONE SHIFTING?
	ORA BITMAP+1		;SET BITS
	STA BITMAP+1
	LDA TEMP1
	ORA BITMAP
	STA BITMAP
	LDX TEMP2		;RESTORE INDEX
	RTS
	.PAGE
	.SBTTL ONE PLAYER OFFENSE & DEFENSE CHECKS
;BLOCK NAME: OFENSE
;BLOCK TYPE: SUBROUTINE
;BLOCK DESCRIPTION: WILL SET CARRY IF COMPUTER IS ON
;		    OFFENSE IN ONE PLAER GAME. ELSE, 
;		    CARRY IS CLEAR
;
;INPUT PARM: PLYR1,OFFENSE,CMPLYR
;OUTPUT PARM: CARRY IS SET FOR COMPUTER ON OFFENSE
;	      CLEAR OTHERWISE
;
;REGISTER USED: A
;
OFENSE:	LDA PLYR1		;IN ONE PLAYER MODE?
	BEQ 10$			;NO
	LDA OFFENS		;COMPUTER ON OFFENSE?
	CMP CMPLYR
	BEQ 20$			;CARRY IS SET
10$:	CLC
20$:	RTS
DEFENS:	LDA PLYR1		;IN ONE PLAYER MODE?
	BEQ 20$			;NO
	LDA OFFENS		;COMPUTER ON DEFENSE
	CMP CMPLYR
	BEQ 20$			;NO
	SEC			;YES
	RTS
20$:	CLC
	RTS

	.SBTTL BOUNDARY CHECK
	
;BLOCK NAME:	BCHECK
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	WILL DETERMINE IF VALUE IN A
;			IS OUT OF BOUNDS AND SET CARRY
;			IF SO. OTHERWISE CARRY IS RESET
;
;INPUT PARAMS:	H OR V POS IN A
;OUTPUT PARAMS:	CARRY SET=OUT OF BOUNDS
;REGISTERS USED: A
;STACK USED:	NONE
;
BCHECK:	CMP I,08
	BCC 10$			;OUT OF BOUNDS
	CMP I,0F0
	RTS			;CARRY SET OR RESET PROPERLY
10$:	SEC			;SET CARRY
	RTS
BVCHEK:	CMP I,10
	BCC 10$			;OUT OF BOUNDS
	CMP I,0F8
	RTS			;CARRY SET OR RESET PROPERLY
10$:	SEC			;SET CARRY
	RTS
	.PAGE
	.SBTTL MOVE BALL WITH FIELDER & THROW
	
;BLOCK NAME:	THROW
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	THROW WILL CHECK THE DEFENSIVE
;			PLAYERS PUSH BUTTON TO SET IF IT HAS
;			BEEN PUSHED YET. IF SO HE WILL RESET
;			THE FLDFLG, SET THE THROFL, BALL SPEED
;			& ANGLE, & RETURN. OTHER WISE HE WILL
;			MOVE THE BALL WITH PLAYER HASBAL
;
;INPUT PARAMS:	PUSH BUTTONS & HASBALL
;OUTPUT PARAMS:	BALFLG & BALL POSITION, SPEED & ANGLE
;REGISTERS USED:	A,X,Y
;STACK USED:	NONE
;SUBRT'S USED:	BUTTON
;
THROW:	BIT ATRACT		;GAME MODE?
	BPL 4$			;NO
	JSR DEFENS
	BCS 4$
	JMP 20$			;YES
4$:	LDX HASBAL		
	TXA
	SEC
	SBC I,<SSTOP*2>+1	;INFIELD OR OUTFIELD
	BPL 13$			;OUTFIELD
	LDA FSTFLD		;INFIELD
	LSR			;FIRST FIELDING OF BALL?
	BEQ 10$			;YES-LOOK FOR FORCE
	TXA			;NO-ANYONE COMING THIS WAY? I DON'T KNOW!!
	LSR
	SEC
	SBC I,CATCHER
	BMI 18$			;PITCHER (SHOULDNT HAPPEN)
	BNE 1$			;IF NOT CATCHER
	LDA I,4			;CATCHER IS AT HOME
	BNE 2$			;ALWAYS
1$:	CMP I,SSTOP-CATCHER	;SHORTSTOP?
	BNE 2$			;NO
	LDA I,SCNDB-CATCHER	;YES, 2ND BASE IS OK
2$:	LDY I,3			;ANY ONE HEADING THIS WAY? 
3$:	CMP AY,MOVE
	BNE 5$			;NO
	TYA			;YES, WE HAVE A SUCKER
	ASL			;MOVE TOWARD HIM
	ADC I,BATTER*2
	TAY
	LDA AY,HPOSH
	STA AX,HGOAL
	LDA AY,VPOS
	STA AX,VGOAL
	BNE 30$
5$:	DEY
	BPL 3$
10$:	LDA FORCE		;LOOK FOR FORCE BASE
	BEQ 18$			;NO FORCES
	LDY I,1			;PICK HIGHEST BASE
11$:	LSR
	BEQ 12$
	INY
	BNE 11$
12$:	TYA			;BASE OF FORCE
	AND I,3			;MAKE HOME LOOK LIKE BASE 0
	CLC
	ADC I,CATCHER		;MAKE PLAYER INDEX
	ASL
	CMP I,SCNDB*2		;SECOND BASEMAN?
	BNE 17$			;NO	
	CMP HASBAL		;DOES HE HAVE BALL?
	BNE 17$			;NO
	LDA I,SSTOP*2		;YES, THROW TO SHORTSTOP
17$:	CMP HASBAL		;DOES HE HAVE BALL?
	BNE 19$			;NO
	SBC I,<CATCHER*2>	;YES, RACE HIM TO BAG
	TAY
	LDA AY,BGOALH
	STA AX,HGOAL
	LDA AY,BGOALV
	STA AX,VGOAL
	BNE 30$
19$:	STA TOBALX
	BNE 25$			;ALWAYS
13$:	LDY I,2			;LOOK FOR HIGHEST BASE OBTAINED
	LDA MOVE+3
	BPL 14$
	EOR I,0FF
14$:	CMP AY,MOVE
	BCS 15$			;THIS ONE HIGHER
	LDX AY,MOVE
	BMI 15$
	TXA
15$:	DEY
	BPL 14$
	TAY			;THIS IS HIGH BASE OBTAINED
	BNE 12$
18$:	LDA I,PITCHER*2		;RETURN BALL TO PITCHER
	STA TOBALX
	BNE 25$
20$:	LDA OFFENS
	EOR I,2			;GET DEFENSE
	TAX
	JSR BUTTON
	BEQ 30$			;THROW BUTTON NOT PUSHED YET
25$:	LDA I,FLDFLG?0FF	;RESET FIELDED FLAG
	AND BALFLG
	ORA I,THROFL		;SET THROW FLAG
	STA BALFLG
	LDA I,0			;SET UP THROW SPEED
	STA SPEED
	STA FLDCTL		;RESET TBALL CONTROL
	STA RUNPLY		;RESET RUNS/PLAY
;
;
	RTS
30$:	LDX HASBAL		;MOVE BALL WITH PLAYER
	LDA AX,HPOSH
	STA A,BHPOSH
	LDA AX,VPOS
	STA A,BVPOS
	DEC THRTMR		;HAS BALL BEEN THROWN FOR 6 SECOND?
	BNE 35$			;YES!
	LDA I,1			;NO!
	STA CLK32S		;CAUSE MASTER PLAY TIMER TO TIMEOUT
35$:	RTS

	.SBTTL BALL THROWN MOTION
	
;BLOCK NAME:	BALMOV
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	BALMOV WILL MOVE THE BALL UNDER
;			TBALL CONTROL AT DOUBLE PLAYER MOTION
;			SPEED LIMIT
;
;INPUT PARAMS:	THINC TVINC
;OUTPUT PARAMS:	BHPOSH,BVPOS
;REGISTERS USED: A
;SUBROUTINES USED: TBALL
;STACK USED:	NONE
;
BALMOV:	LDA OFFENS
	EOR I,2			;GET DEFENSE NUMBER
	TAX
	JSR TBALL		;MOVE BALL ACCORDING TO TBALL
	LDA THINC
	STA TEMP1
	LDA THINC+1
	JSR LSHFT2		;4* H INCREMENTS
	STA TEMP2
	LDA A,BHPOSL		;INCREMENT H POS OF BALL
	CLC
	ADC TEMP1
	STA A,BHPOSL
	LDA A,BHPOSH
	ADC TEMP2
	JSR BCHECK
	BCS 10$			;OUT OF BOUNDS
	STA A,BHPOSH
10$:	LDA TVINC		;4* V INCREMENT
	STA TEMP1
	LDA TVINC+1
	JSR LSHFT2
	STA TEMP2		;INCREMENT V POS OF BALL
	LDA A,BVPOSL
	CLC
	ADC TEMP1
	STA A,BVPOSL
	LDA A,BVPOS
	ADC TEMP2
	JSR BVCHEK
	BCS 20$			;OUT OF BOUNDS
	STA A,BVPOS
20$:	RTS
	.PAGE
	.SBTTL FOUL BALL CHECK
	
;BLOCK NAME:	FOULCK
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRIPTION:	FOULCK WILL DETERMINE IF THE BALL IS
;			IN FOUL TERRITORY AND SET FOULD IN BALFLG IF SO
;
;INPUT PARAMS:	BVPOS,BHPOSH
;OUTPUT PARAMS:	CARY SET=FOUL
;REGISTERS USED: A,X
;STACK USED:	NONE
;
FOULCK:	LDA FAIR
	BNE 30$			;BALL HAS ALREADY BOUNCED FAIR
	LDA A,BHPOSH		;GET HORIZONTAL BALL POSITION
	SEC
	SBC I,1C		;SUBTRACT AREA BEHING PLATE
	BCC 20$			;IF NEGATIVE BALL IS FOUL
	STA TEMP1		;SAVE IT
	LDA A,BVPOS		;VERT POSITION
	SBC I,4
	BPL 10$
	CLC
	EOR I,0FF		;FOLD FIELD OVER
	ADC I,1
10$:	CLC
	ADC TEMP1		;ADD HORIZONTAL
	BCS 30$
	BMI 30$
20$:	SEC			;SET CARRY FOR FOUL
	RTS
30$:	CLC			;CLEAR CARRY FOR FAIR
	RTS
	.PAGE
	.SBTTL CHECK BASES
	
;BLOCK NAME:	CKBASE
;BLOCK TYPE:	SUBROUTINE
;BLOCK DECRIPTION: 	THIS ROUTINE WILL CHECK THE RUNNERS
;			PROGRESS AND DETERMINE IF THEY HAVE
;			REACHED A BASE. IF SO, THEY WILL
;			INDICATE THE CURRENT BASE # IN
;			THE 4 BYTE ARRAY BASE. IF IT IS DETERMINE
;			THAT A BASE WAS REACHED WITHOUT
;			THE PRIOR BASE BEING TOUCHED, THEN THE
;			MINUS FLAG IS SET ALONG WITH THE BASE
;			MISSED IN THE HIGH NIBBLE.
;			WILL ALSO UPDATE FORCE CONDITION
;
;INPUT PARAMS:	POSITIONS OF RUNNERS BASE (4 BYTES)
;OUTPUT PARAMS:	BASE,FORCE
;REGISTERS USED: A,X,Y
;STACK USED:	NONE
;SUBROUTINE USED: BASCOL
;
CKBASE:	LDA MOVE
	BMI 9$
1$:	LDA BASE		;GET OLD BASE #
	STA TEMP1		;SAVE IT
	LDX I,BATTER*2
	JSR BASCOL		;CHECK FOR COLLISION
	BEQ 4$			;NO COLLISION
	SEC
	STA TEMP2		;SAVE IT
	SBC TEMP1		;DIFFERENCE
	BEQ 4$
	LSR
	BEQ 10$			;IT'S ONE, SO EVERYTHING OK
	CMP I,2
	BNE 5$
	LDA TEMP1
4$:	BEQ CKOTHR
5$:	LDX I,0			;MISSED A BASED
	INC MISSED
	INC BATOUT		;BATTER IS OUT
	JSR PUTOUT
	INC OUTS
9$:	BNE CKOTHR
10$:	LDA TEMP2
	STA BASE
	LDY I,0			;REMOVE FORCES
	STY FORCE
	CMP I,4			;DID HE SCORE
	BNE 15$			;NO
	JSR INCRUN		;YES, UPDATE SCORE
	LDY OFFENS		;CHANGE PICTURE TO RUN TO DUGOUT
	BNE 11$
	LDA I,48
	BNE 12$
11$:	LDA I,88
12$:	STA A,MOBJ+<BATTER*2>	;MOVE HIM TO DUGOUT
	LDA I,HDUGO
	STA A,HGOAL+<BATTER*2>
	LDA I,VDUGO
	STA A,VGOAL+<BATTER*2>
	LDA I,PLYEND		;END PLAY
	ORA BALFLG
	STA BALFLG
	LDA I,0FF		;TURN HIM INTO DRONE
	STA MOVE
	BNE CKOTHR
15$:	LDA FSTFLD		;BALL FIELDED?
	BNE 20$			;YES
	LDA MOVE		;DRONE?
	BEQ CKOTHR		;NO
	INC MOVE		;YES, MOVE HIM TO NEXT BASE
	LDA MOVE
	AND I,1
	BNE 16$
	LDA A,MOBJ+<BATTER*2>	;CHANGE PICTURE OF DRONE AT 1ST & 3RD
	EOR I,80
	STA A,MOBJ+<BATTER*2>
16$:	LDA MOVE
	ASL
	TAX
	LDA AX,BGOALH		;SET UP NEW GOALS
	STA A,HGOAL+<BATTER*2>
	LDA AX,BGOALV
	STA A,VGOAL+<BATTER*2>
	BNE CKOTHR
20$:	LDA I,0			;STOP DRONE BATTER
	STA MOVE
CKOTHR:	LDX I,<BATTER*2>+2	;START WITH 1ST RUNNER
	LDY I,1
1$:	LDA AY,MOVE
	BMI 50$
	BEQ 50$
	JSR BASCOL
	BEQ 50$			;NOT TOUCHING A BASE
	CMP AY,BASE		;SAME BASE
	BEQ 50$
	STA AY,BASE
	CMP I,4
	BNE 20$
	LDA I,0FF		;SCORED!
	STA AY,MOVE
	LDA I,0
	STA AY,BASE
	LDA AX,MOBJ		;FLIP PICTURE
	EOR I,80
	STA AX,MOBJ
	LDA I,HDUGO		;SEND HIM TO DUGOUT
	STA AX,HGOAL
	LDA I,VDUGO
	STA AX,VGOAL
	STX TEMP1
	JSR INCRUN
	LDX TEMP1
	JMP 50$
20$:	CMP I,3			;3RD?
	BNE 30$			;NO
	LDA AX,MOBJ		;YES, FLIP PICTURE
	EOR I,80
	STA AX,MOBJ
30$:	LDA FSTFLD
	BNE 45$			;STOP RUNNERS
	LDA AY,BASE		;MOVE'M ALONG
	CLC
	ADC I,1
	STA AY,MOVE
	STY TEMP1
	ASL
	TAY
	LDA AY,BGOALH		;UPDATE GOALS
	STA AX,HGOAL
	LDA AY,BGOALV
	STA AX,VGOAL
	LDY TEMP1
	BNE 50$			;ALWAYS
45$:	LDA I,0			;YES
	STA AY,MOVE		;STOP RUNNER AT BASE
50$:	INY
	INX
	INX
	CPY I,4			;DONE?
	BEQ 55$
	JMP 1$
55$:	LDA FORCE
	BEQ CF.RET
	LDA BASE		;BATTER ON?
	BNE CF.10		;YEP - NO FORCES
	LDX I,1
	STX TEMP1		;CONVENT
	LDY I,2
C.FORCE:LDA ZX,BASE
	CMP TEMP1		;NEXT BASE OCCUPIED
	BNE CF.15		;NOT YET
	TYA			;YES
	ORA FORCE		;UPDATE FORCE
	STA FORCE
	TYA
	ASL
	TAY
	LDA I,3			;DONE?
	CMP TEMP1
	BEQ CF.RET		;YES
	INC TEMP1		;NEXT BASE
	LDX I,1
	BNE C.FORCE		;ALWAYS
CF.10:	LDA I,0			;TURN OFF FORCES
	BEQ CF.20
CF.15:	INX
	CPX I,4
	BNE C.FORCE
	LDX TEMP1
	LDA I,0FE
10$:	DEX
	BEQ 15$
	ASL
	BNE 10$
15$:	EOR I,0FF
	AND FORCE
CF.20:	STA FORCE
CF.RET:	RTS
	.PAGE
	.SBTTL INCREMENT RUNS
;BLOCK NAME:	INCRUN
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	INCREMENTS RUNS
;
;REGS USED:	A,X
;
INCRUN:	BIT ATRACT		;GAME MODE?
	BPL 10$			;NO, RETURN
	LDX OFFENS		;INCREMENT RUNS
	LDA ZX,RUNS
	CLC
	SED
	ADC I,1
	CLD
	STA ZX,RUNS
	INC RUNPLY
	LDA I,0B0		;A BIG CHEER
	STA CHEER
	INC RUNING
	LDA I,30		;ROL OVER
	CMP RUNING
	BNE 10$
	LDA I,1C
	STA RUNING
10$:	RTS
	.PAGE
	.SBTTL INCREMENT INNINGS PAID FOR
;BLOCK NAME: UPING
;BLOCK TYPE: SUBROUTINES
;DESCRIPTION: INCREMENT INNING PAID FOR
;REGS USED: A
;
UPING:	LDA ININGS
	CMP I,99		;MAX OUT INNINGS AT 99
	BEQ 10$
	CLC
	SED
	ADC I,1			;INCREMENT IN DECIMAL
	STA ININGS
	CLD
10$:	RTS
	.PAGE
	.SBTTL BASE COLLISION
;BLOCK NAME: BASCOL
;BLOCK TYPE: SUBROUTINE
;BLOCK DESCRIPTION: BASCOL WILL DETERMINE IF A GIVEN
;	MOTION OBJECT IS IN CONTACT WITH A BASE
;	IF SO, THE NUMBER OF THE BASE (1 TO 4) IS
;	RETURNED IN THE ACCUMULATOR.
;	OTHERWISE 0 IS RETURNED
;INPUT PARAMS:  X=INDEX TO MOTION OBJECT
;OUTPUT PARAMS: A=BASE COLLIDED WITH, ELSEP A=0
;REGISTERS USED: A (X USED BY NOT MODIFIED)
;STACK USED: NONE
;
BASCOL:	LDA AX,HPOSH		;BET HORIZONTAL POSITION
	SEC
	SBC I,54		;CHECK FOR 1 ST OR 3 RD
	BCC 30$			;MIGHT BE AT HOME
	CMP I,BTPROX		;CLOSE ENOUGH?
	BCS 40$			;NO-MIGHT BE SECOND BASE
	LDA AX,VPOS
	SBC I,41		;CHECK FIRST BASE
	BCC B.NO		;RIGHT OF FIRST BASE
	CMP I,BTPROX-4
	BCS 10$			;LEFT OF FIRST-CHECK SECOND
	LDA I,1			;HIT FIRST!
	BNE B.RTRN
10$:	SBC I,7B
	CMP I,BTPROX-4
	BCS B.NO		;NOT ON ANY BASE
	LDA I,3			;HIT 3 RD
	BNE B.RTRN
30$:	LDA AX,HPOSH		;CHECK HOME
	SBC I,17
	BMI B.NO		;BEHIND HOME (WHAT IS HE, A CATCHER?)
	CMP I,BTPROX
	BCS B.NO		;BETWEEN HOME & 3RD OR 1 ST
	LDA AX,VPOS		;GET VERTICAL POSITION
	SBC I,7B
	BMI B.NO		;OFF RIGHT OF HOME
	CMP I,BTPROX-4
	BCS B.NO		;OFF LEFT OF HOME
	LDA I,4			;HIT HOME
	BNE B.RTRN
40$:	SBC I,40		;CHECK SECOND
	BMI B.NO		;NOT THERE EITHER
	CMP I,BTPROX-4
	BCS B.NO		;OVERAN SECOND!
	LDA AX,VPOS
	SBC I,7C
	BMI B.NO		;OFF RIGHT OF SECOND
	CMP I,BTPROX
	BCS B.NO		;OFF LEFT OF 2 ND
	LDA I,2
	BNE B.RTRN
B.NO:	LDA I,0			;INDICATE NO COLLISION
B.RTRN:	RTS
	.PAGE
	.SBTTL TAG
;BLOCK NAME: TAG
;BLOCK TYPE: SUBROUTINE
;BLOCK DESCRIPTION: TAG WILL CHECK THE PLAYER
;	WHO HAS THE BALL AGAINST THE RUNNERS ON
;	BASE & THE BATTER. IF A COLLISION OCCURRS
;	THE X REGISTER WILL HAVE THE MOTION OBJECT
;	INDEX TO THE RUNNER TAGGED. OTHERWISE
;	X WILL BE ZERO
;INPUT PARAMS: POSITIONS OF HASBALL FIELDER & RUNNERS
;OUTPUT PARAMS: X=INDEX TO RUNNER TAGGED
;REGISTERS USED: A,X,Y
;STACK USED: NONE
;
TAG:	LDY HASBAL		;WHO HAS THE BALL?
	BEQ T.RET		;NO ONE HAS THE BALL?
1$:	LDX I,BATTER*2		;START WITH BATTER
10$:	LDA AX,HPOSH
	BEQ 40$			;NOT ON BASE
	SEC
	SBC AY,HPOSH		;GET DIFFERENCE HORIZ
	BCS 11$			;IF POS, BR.
	EOR I,0FF		;ABS VALUE
	ADC I,1
11$:	CMP I,7			;CHECK PROXIMITY
	BCS 40$			;NO COLLISION
	LDA AX,VPOS		;VERT POS OF RUNNER
	SEC
	SBC AY,VPOS		;DIFFERENCE
	BCS 12$			;IF POS BR
	EOR I,0FF
	ADC I,1
12$:	CMP I,7
	BCC T.RET		;A COLLISION - RETURN W/NEWS
40$:	INX
	INX
	CPX I,<<BATTER+3>*2>+1
	BCC 10$			;CHECK NEXT RUNNER
	LDX I,0			;NO COLLISIONS
T.RET:	RTS

	.SBTTL RUN
	
;BLOCK NAME:	RUN
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCRITPION:	RUN WILL ADVANCE ALL RUNNERS
;
;INPUT PARMS:	ARRAY BASE (4 BYTES)
;OUTPUT PARMS:	H & V POS OF RUNNERS
;REGISTER USED: A,Y,X
;STACK USED:	NONE
;SUBS USED:	FOULCK,DIRECT,SPDLIM,UDTHV,FLDLEG
;
RUN:	LDA FSTFLD
	BNE 1$
	LDA BATOUT		;BATTER OUT?
	BNE 1$			;YES
	JSR FOULCK
	BCS 55$			;IF BALL NOT FOUL
1$:	LDY I,3			;START WITH LAST RUNNER
	LDX I,<BATTER+3>*2
5$:	LDA AY,MOVE
	BEQ 50$			;DON'T MOVE THIS GUY
	STY TEMP3
	JSR DIRECT
	LDA THINC
	ORA THINC+1
	ORA TVINC
	ORA TVINC+1
	BNE 30$
	STA AY,MOVE		;STOP HIM
	BEQ 50$
30$:	LDA I,0
	JSR SPDLIM		;LIMIT SPEED
	JSR UPDTHV		;UPDATE POSITION
	JSR FLDLEG		;MOVE HIS LEGS
	LDY TEMP3
50$:	DEX
	DEX
	DEY
	BPL 5$
55$:	RTS
	.PAGE
	.SBTTL AUTOMATIC BALL MOVEMENT
;BLOCK NAME:	AUTOBL
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	WILL DIRECT THE BALL TO PLAYER SPECIFIED IN TOBALL.
;
;INPUT PARAMS:	TBALL INPUT, BALL POSITION, TOBALL
;OUTPUT PARAMS:	BALL POSITION ACC=0 WHEN DONE
;SUBS USED:	DIRECT, SPDLIM, UPDTHV
;STACK USAGE:	NONE
;
AUTOBL:	LDX TOBALX		;WHO DO WE MOVE BALL TO?
	LDA AX,HPOSH		;SET UP GOAL
	STA A,HGOAL+1C
	LDA AX,VPOS
	STA A,VGOAL+1C
	LDX I,1C		;BALL INDEX
	JSR DIRECT
	LDA I,10		;BALL SPEED
	JSR SPDLIM
	LDA TVINC
	ORA TVINC+1
	ORA THINC
	ORA THINC+1
	BEQ 10$
	JSR UPDTHV
	LDA I,1
10$:	RTS
CKS5:	.BYTE 8E
	.PAGE
	.SBTTL PLAYFIELD
;
;BLOCK NAME:	PLYFLD
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	PLYFLD WILL FIRST BLANK THE SCREEN AND THEN WRITE OUT THE PLAYFIELD
;		BASED ON WHETHER PLAYER #1 OR #2 IS OFFENSE.
;INPUT PARAMS:	OFFENS
;OUTPUT PARAMS:	PLAYFIELD (1000-13BF)
;REGISTER USED:	A,X,Y
;STACK USAGE:	3 BYTES IN BASLIN LOCAL SUBROUTINE
;
PLYFLD:	LDA I,0			;SET UP TO CLEAR SCREEN
	STA OUTS
	STA BALLS
	STA STRIKE
	STA A,SFHPOS
	STA THPOS
	LDA OPTION		;CHOOSE INFIELD SKILL
	AND I,3
	TAY
	LDA AY,SKILL
	STA INSPDX
	LDA I,10
	STA THPOS+1		;INDIRECT ADDRESS
	LDA I,0
	LDX I,3
1$:	LDY I,0FF
2$:	STA NY,THPOS		;START OF LOOP
	DEY
	BNE 2$
	STA NY,THPOS
	STA ZX,BASE		;INIT BASE RUNNERS
	INC THPOS+1		;NEXT 100 BYTES
	DEY
	DEX
	BMI 3$			;ALL DONE
	BNE 1$			;SECTORS 0,1,2
	LDY I,0BF		;SECTOR 3
	BNE 2$			;***ALWAYS
3$:	LDX OFFENS
	BNE 4$
	LDA I,12		;STARTING LOCATION OFFENS #1
	STA THPOS
	LDA I,10
	STA THPOS+1
	BNE 5$			;***ALWAYS
4$:	LDA I,1A		;STARTING ADDRESS FOR OFFENSE #
	STA THPOS
	LDA I,12
	STA THPOS+1
5$:	LDX I,14.		;LOOP COUNT
	LDA I,1F		;INCREMENT
	LDY I,03		;STAMP # FOR BASELINE
	JSR BASLIN		;SET UP LEFT FIELD FOUL LINE
	LDX OFFENS
	BNE 6$			;BRANCH FOR OFFENSE #2
	LDA I,12		;STARTING ADDR FOR
	STA THPOS
	STA THPOS+1
	BNE 7$			;***ALWAYS
6$:	LDA I,12		;STARTING ADDR FOR OFFENSE #2
	STA THPOS
	LDA I,11
	STA THPOS+1
7$:	LDX I,6			;LOOP COUNT
	LDA I,1F		;INCREMENT
	LDY I,03		;STAMP # FOR BASELINE
	JSR BASLIN		;SET UP BASELINE 1ST-2ND
	LDX OFFENS
	BNE 8$			;OFFENSE #2 THEN BRANCH
	LDA I,05		;STARTING ADDRESS OFFENSE #1
	STA THPOS
	LDA I,12
	STA THPOS+1
	BNE 9$			;***ALWAYS
8$:	LDA I,0D		;STARTING ADDRESS OFFENSE #2
	STA THPOS
	LDA I,10
	STA THPOS+1
9$:	LDX I,14.		;LOOP COUNT
	LDA I,21		;INCREMENT
	LDY I,43		;BASELINE STAMP #
	JSR BASLIN		;SETUP RIGHT FIELD FOUL LINE
	LDA I,0D		;LOW BYTE SAME FOR BOTH
	STA THPOS
	LDX I,11
	LDA OFFENS		;BRANCH IF #1 OFFENSE
	BEQ 10$
	INX			;ELSE BUMP TO NEXT PAGE
10$:	STX THPOS+1
	LDY I,43		;STAMP #
	LDX I,06		;LOOP COUNT
	LDA I,21		;INCREMENT
	JSR BASLIN		;SET UP BASELINE 2ND-3RD
	JSR DSTAT
;
;SET UP BASES
;
	LDX OFFENS		;BASES FOR PLAYER #2
	BNE OFF2
	LDA I,04		;3RD BASE
	STA 10EB
	LDA I,44
	STA 10EC
	LDA I,06		;HOME PLATE
	STA 11C4
	LDA I,86
	STA 11E4
	LDA I,05		;2ND BASE
	STA 11D3
	LDA I,85
	STA 11F3
	LDA I,84		;1ST BASE
	STA 12CB
	LDA I,0C4
	STA 12CC
;
;SET UP TRIPLE-HR TARGETS
;
	LDA I,50		;THERE HAS GOT TO BE A BETTER WAY
	STA 10BE
	STA 139E
	LDA I,0D0
	STA 103E
	STA 131E
	LDX I,60
	STX 105E
	STX 133E
	INX
	STX 107E
	STX 135E
	INX
	STX 109E
	STX 137E
	INX
	STX 119E
	INX
	STX 11BE
	INX
	STX 11DE
	INX	
	STX 11FE
	INX
	STX 121E
	INX
	STX 123E
	RTS
OFF2:	LDA I,04		;1ST BASE
	STA 10F3
	LDA I,44
	STA 10F4
	LDA I,45		;2ND BASE
	STA 11CC
	LDA I,0C5
	STA 11EC
	LDA I,46		;HOME PLATE
	STA 11DB
	LDA I,0C6
	STA 11FB
	LDA I,84		;3RD BASE
	STA 12D3
	LDA I,0C4
	STA 12D4
;
;SET UP TARGETS
;
	LDA I,50
	STA 10A1
	STA 1381
	LDA I,0D0
	STA 1021
	STA 1301
	LDX I,0A0
	STX 1081
	STX 1361
	INX
	STX 1061
	STX 1341
	INX
	STX 1041
	STX 1321
	INX
	STX 1221
	INX
	STX 1201
	INX
	STX 11E1
	INX
	STX 11C1
	INX
	STX 11A1
	INX
	STX 1181
	RTS
BASLIN:	STA TEMP1			;SAVE INCREMENT
1$:	TYA				;GET STAMP VALUE
	LDY I,0				;ZERO INDEX
	STA NY,THPOS
	DEX
	BEQ 5$				;IF DONE RETURN
	TAY				;SAVE STAMP #
	LDA TEMP1			;GET INCREMENT
	CLC
	ADC THPOS			;INC TO NEXT LOC
	STA THPOS
	BCC 1$
	INC THPOS+1
	BCS 1$				;***ALWAYS
5$:	RTS
	.SBTTL INIT
;
;
;
INIT:	LDA I,0
	STA MOVE
	STA BASE
	LDX I,MISSED-BALFLG
12$:	STA ZX,BALFLG
	DEX
	BPL 12$
	JSR OFENSE		;CARRY SET IF COMPUTER AT BAT
	LDA I,1
	STA FORCE		;ALWAYS FORCE AT FIRST
	BCS 10$
	BIT ATRACT
	BMI 1$
10$:	STA MOVE		;DRONE BATTER IN A ATRACT
1$:	LDA I,SLDVAL
	STA SLIDE
;
;TBALL CONTROL OF LEFT CENTER RIGHT
	LDA I,7*2
	STA FLDCTL
	LDA I,8*2
	STA FLDCTL+1
	LDA I,9*2
	STA FLDCTL+2
	LDA I,80		;180 DEG FOR PLAYER #1 OFFENSE
	STA ANGLE
	LDY I,0D0		;1ST BAT STAMP
	LDA OFFENS
	BNE 2$
	LDY I,10
2$:	STY BSTMP
	LDX I,-1		;ZAP CTLPTR
	STX CTLPTR
	STX CTLPTR+2
	STX SLOCK		;LOCK OUT INTERRUPT ROUTINE
	LDY I,15		;START AT END OF TABLE
	LDX I,15
20$:	LDA AX,INITBL		;SET UP POSITIONS
	STA AY,VGOAL-1
	DEX
	LDA AX,INITBL
	STA AY,HGOAL-1
	DEX
	DEY
	DEY
	BPL 20$
	LDA A,INITBL		;BAT POSITION
	STA A,HPOSH
	LDA A,INITBL+1
	STA A,VPOS
	LDA A,INITBL+1C		;BALL POS
	STA A,BHPOSH
	LDA A,INITBL+1D
	STA A,BVPOS
	LDX I,2			;SET UP PICTURE STAMPS
	LDA I,0CA		;FIELDER 0
	LDY OFFENS
	BEQ 3$
	LDA I,0A
3$:	LDY I,9			;9 FIELDERS
5$:	STA AX,MOBJ
	INX
	INX
	DEY
	BNE 5$
	LDA I,0CC		;BATTER IS MOBJ #10
	LDY OFFENS
	BEQ 7$
	LDA I,0C
7$:	STA AX,MOBJ
	LDY I,1
INIRUN:	INX
	INX
	LDA AY,BASE		;SET UP RUNNERS
	STA AY,MOVE		;IN CASE ZERO, ZERO IT
	BEQ 14$
	AND I,0F		;NO APPEALS AFTER PLAY OVER
	STA AY,BASE
	CLC
	ADC I,1
	STA AY,MOVE
	STY TEMP1
	ASL
	TAY
	LDA AY,BGOALH		;SET UP RUNNERS GOALS
	STA AX,HGOAL
	LDA AY,BGOALV
	STA AX,VGOAL
	LDY TEMP1
	LDA AY,BASE
	SEC
	SBC I,1
	BNE 11$
	LDA I,48		;1ST BASE
	STA AX,MOBJ
	LDA I,5C
	STA AX,HPOSH
	LDA I,45
	STA AX,VPOS
	BNE 13$			;NEXT
11$:	SBC I,1
	BNE 12$
	LDA I,48		;2ND BASE
	STA AX,MOBJ
	LDA I,9B
	STA AX,HPOSH
	LDA I,85
	STA AX,VPOS
	BNE 13$			;NEXT
12$:	LDA I,0C8		;3RD BASE
	STA AX,MOBJ
	LDA I,58
	STA AX,HPOSH
	LDA I,0BF
	STA AX,VPOS
13$:	LDA OFFENS
	BEQ 14$
	LDA AX,MOBJ
	EOR I,0C0		;FLIP FOR OFFENS=2
	STA AX,MOBJ
14$:	INY
	CPY I,4
	BNE INIRUN
	INX
	INX
	LDA I,87		;BALL IS MOTION OBJ #14
	LDY OFFENS
	BEQ 15$
	LDA I,47
15$:	STA AX,MOBJ
	INX
	INX
	TYA
	STA AX,MOBJ		;NO MOTION OBJECT #15
	LDA I,0
	STA SLOCK
	RTS
;LSHFT - LEFT SHIFT
;
;ENTRY	(A) = MSB
;	(TEMP1) = LSB
;EXIT	(A) = MSB
;	(TEMP1) = LSB
LSHFT3:	ASL TEMP1
	ROL
LSHFT2:	ASL TEMP1
	ROL
LSHFT1:	ASL TEMP1
	ROL
	RTS
;MULT - MULTIPLY INDEX BY A SIGNED NUMBER
;
;ENTRY	(A) = MULTIPLIER (SIGNED -128 TO 127)
;	(X) = MULTIPLICAND (0 TO 127)
;EXIT	(X) = LSB OF RESULT
;	(Y) = MSB OF RESULT
;USES	A,X,Y,TEMP1,(TEMP2,TEMP2+1)
MULT:	LDY I,0
	STA TEMP2		;SAVE OPERAND
	STX TEMP1
	ORA I,0
	BPL 10$
	LDY I,0FF		;SIGN EXTEND
10$:	STY TEMP2+1
	LDX I,0			;CLEAR RESULT
	LDY I,0
20$:	LSR TEMP1
	BCS 30$			;TIME TO ADD IN
	BNE 40$			;IF NO MORE MULTIPLIER
	RTS

30$:	CLC
	TXA
	ADC TEMP2
	TAX
	TYA
	ADC TEMP2+1
	TAY
40$:	ASL TEMP2		;2*MULTIPLIER
	ROL TEMP2+1
	JMP 20$


;RAND - RANDOM NUMBER GENERATOR
;
;EXIT	(A)=RANDOM NUMBER
;USES	A
RAND:	ASL POLYL		;SHIFT LEFT
	ROL POLYH
	BPL 1$
	INC POLYL
1$:	LDA POLYL		;CHANGE BIT 0 DEPENDING ON BIT 1
	AND I,2
	BEQ 2$
	LDA POLYL
	EOR I,1
	STA POLYL
2$:	LDA POLYH		;CHECK FOR ZERO
	ORA POLYL
	BNE 3$
	INC POLYL
3$:	LDA POLYL
	RTS


;SHIFT - SIGN EXTENSION DOUBLE BYTE SHIFT (DIVIDE)
;
;ENTRY	(A) = MSB
;	(TEMP1) = LSB
;EXIT	(A) = NEW MSB
;	(TEMP1) = NEW LSB
;USES	A,TEMP1
SHIFT2:	CMP I,80
	ROR
	ROR TEMP1
SHIFT1:	CMP I,80
	ROR
	ROR TEMP1
	RTS


;COS-COSINE
;
;ENTRY	(A) = ANGLE 6 TO FF REPRESENTS 0 TO 360 DEGREES
;EXIT	(A) = COSINE (-127 TO +127)
;USES	A,X
COS:	CLC			;COS(A)=SIN(A+PI/2) COUNTER CLOCKWISE
	ADC I,40


;SIN-SINE
;
;ENTRY	(A) = ANGLE (0 TO FF REPRESENTS 0 TO 360 DEGREES)
;EXIT	(A) = SINE (-127 TO +127)
;USES	A,X
SIN:	LSR
	LSR			;0 TO 3F
	TAX
	LDA AX,77$		;SINE
	RTS

77$:	.BYTE 0,13.,25.,37.,49.,60.,71.,81.		;SIN (0-7)
	.BYTE 91.,99.,106.,113.,118.,122.,126.,127.	;SIN (8-F)
	.BYTE 127.,127.,126.,122.,118.,113.,106.,99.	;SIN (10-17)
	.BYTE 91.,81.,71.,60.,49.,37.,25.,13.		;SIN (18-1F)
	.BYTE 0,-13.,-25.,-37.,-49.,-60.,-71.,-81.	;SIN (20-27)
	.BYTE -91.,-99.,-106.,-113.,-118.,-122.,-126.,-127.	;SIN (28-2F)
	.BYTE -127.,-127.,-126.,-122.,-118.,-113.,-106.,-99.	;SIN (30-37)
	.BYTE -91.,-81.,-71.,-60.,-49.,-37.,-25.,-13.	;SIN (38-3F)
FANS:
10$:	LDA CHEER+1		;GET PRESENT CHEER
	CMP CHEER		;COMPARE TO DESIRED
	BCS 12$			;IF PRESENT GREATER, DEC 
	ADC I,0C		;ELSE RUN QUICKLY UP
	BCC 18$			;BRANCH NO WRAP
	LDA I,0FF		;ELSE SET MAX AND FALL THROUGH TO RESET
12$:	LDY I,0
	STY CHEER		;RESET DESIRED
	SBC I,02		;DECREASE SLOWLY
	BCS 18$			;BRANCH NO WRAP
	LDA I,0			;ELSE SET MIN
18$:	STA CHEER+1		;SAVE PRESENT
	LSR
	LSR
	LSR
	LSR
	BNE 21$
	LDA I,1			;KEEP SOME SOUND
21$:	STA CROWD
	RTS
ASCAX:	PHA
	AND I,0F		;ISOLATE LOW NYBBLE
	CMP I,10.		;A-F?
	BCC 1$			;NO, SKIP
	ADC I,6.		;ELSE ADD 7 (6+CARRY)
1$:	ADC I,'0		;MAKE ASCII
	TAX			;X:=LOW NYBBLE
	PLA
	LSR
	LSR
	LSR
	LSR
	CMP I,10.
	BCC 2$
	ADC I,6
2$:	ADC I,'0
	RTS
	.PAGE
	.SBTTL BUTTON PUSH CHECK
;
;BLOCK NAME:	BUTTON
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	BUTTON WILL CHECK THE SELECTED BUTTON TO DETERMINE IF PUSHED.
;		IT WILL DEBOUNCE AND RETURN WITH THE ACC=10.  IF PUSHED, ACC=0
;		IF NOT AND THE ZFLAG SET ACCORDINGLY.
;
;INPUT PARAMS:	X=INDEX TO BUTTON TO CHECK (0 OR 2)
;OUTPUT PARAMS:	ACC=10 FOR PUSH, 0 FOR NOT, ZFLAG
;REGS USED:	A,Y(X NOT CHANGED)
;STACK USAGE:	NONE
;
BUTTON:	LDY ZX,SWSTAT		;GET SWITCH STATUS
	TYA
	EOR ZX,OSSTAT		;DEBOUNCE SWITCH
	AND ZX,OSSTAT		;CHANGE TO 0?
	STY ZX,OSSTAT
	AND I,10		;SELECT SWITCH
	RTS


	.SBTTL PLAYER-CONTROLS
;*************************
;*
;*PLAY SELECTION
;*
;***************************
;
;DESCRIPTION:
;	IN GAME:
;		-ONCE PER PUSH OF "PLAY-SELECT" BUTTON, ROUTINE
;		1) SETS PSTIM=10.
;		2) SETS CHGFLG & MPSTIM, IF NOT ALREADY RUNNING
;		3) INCREMENTS PLAYNO(X)
;		4) REDUCES PLAYNO(X),MODULO NPLAYS
;		5) SETS LED WD(X) TO LIGHT LAMPS
;		6) CALLS INITL TO SET-UP MEN
;		-REGARDLESS OF BUTTON; DECREMENT PSTIM(X) IF >0
;    IN ATTRACT:
;		-FAKES BUTTON-PRESSING WITH PAUST AS "RANDOM" #,
;		THEN DOES ALL ABOVE STUFF.
;REGISTERS:
;	IN:	DON'T CARE
;	OUT:	X=-2, A&Y-BLITZED
;
;
;STACK USE:	2 BYTES FOR RTN ADDR. OF CALLER
;		+6 BYTES USED BY INITL IF CALLED
;		=8 TOTAL
;
;
;BASE PAGE USE:	READ: SWSTAT
;		MODIFY: OSSTAT, PLAYNO,CHGFLG,MPSTIM,PSTIM
;		WRITE: LEDWD
;		TEMP: -NONE-
PSEL:	LDX I,2
	LDA I,0
	STA LEDTMP
	CMP MPSTIM
	BEQ 1$
	DEC MPSTIM
1$:	LDA PLYR1		;ONE PLAYER?
	BEQ 2$		;NO
	CPX CMPLYR		;COMPUTER'S TURN
	BEQ 3$			;YES, SELECT IMMEDIATELY
2$:	LDA ATRACT		;IN ATTRACT?
	BMI 5$			;NO, GAME
3$:	LDA ZX,PSTIM		;TIMER STARTED?
	BPL 14$			;YES, RUN IT
	BMI 15$			;ELSE, SELECT IMMEDIATELY
;IN GAME BLINK LICONS, LOOK AT BUTTONS
5$:	LDA Z,FRAME		;FLASH LICON LEDS
	LSR
	LSR
7$:	LDY ZX,PSTIM
	BNE 11$
	CLC
11$:	ROL LEDTMP
	JSR BUTTON
	BNE 15$			;PRESSED, SELECT PLAY
	LDA ZX,PSTIM		;CHECK TIMER
	BPL 14$			;STARTED,
	LDA MPSTIM		;TIMEOUT?
	BEQ 15$			;YES, FACE PUSH
	BNE 50$			;NO, CONTINUE
14$:	BEQ 50$			;TIMED OUT, SKIP
	DEC ZX,PSTIM		;RUN IT
	BPL 50$			;ALWAYS
15$:	LDA ZX,PSTIM		;HAS HE SELECTED?
	BEQ 50$			;YES, LOCK IT IN
19$:	LDA I,60.
	STA ZX,PSTIM		;PSTIM:=60. (FOR 2 SECOND)

;PLAYNO(X):=MOD(PLAYNO+1,NPLAYS)

20$:	INC ZX,PLAYNO		;BUMP PLAYNO
	LDA ZX,PLAYNO
	AND I,3			;MODULO 4

30$:	STA ZX,PLAYNO
	TAY
	CPX OFFENS
	BNE 49$
	AND I,1			;LEFTY OR RIGHTY?
	BNE 43$			;LEFTY
	LDA I,8A		;RIGHTY
	STA A,VPOS+<BATTER*2>	;BATTER POSITION
	TXA
	BEQ 45$
40$:	LDA BSTMP
	ORA I,80
	STA BSTMP
	LDA A,MOBJ+<BATTER*2>
	AND I,7F
	STA A,MOBJ+<BATTER*2>
	BNE 49$			;ALWAYS
43$:	LDA I,7E
	STA A,VPOS+<BATTER*2>
	TXA
	BEQ 40$
45$:	LDA BSTMP
	AND I,7F
	STA BSTMP
	LDA A,MOBJ+<BATTER*2>
	ORA I,80
	STA A,MOBJ+<BATTER*2>
49$:	SEC
	LDA I,0
31$:	ROL
	DEY
	BPL 31$
	LDY PLYR1
	BEQ 34$
33$:	CPX CMPLYR		;COMPUTER'S TURN?
	BEQ 50$			;YES, DON'T LIGHT ANY LED'S
34$:	STA ZX,LEDWD		;LEDWD(X)-2**(PLAYNO(X)-1)
50$:	DEX
	DEX
	BMI 51$
	JMP 1$
51$:	LDA LEDTMP
	STA LEDWD+1
	RTS
CKS6:	.BYTE 1F
	.SBTTL UTILITIES
	.SBTTL CLEAR ALPHANUMERICS
CAN:	LDX I,128.
	LDA I,0
1$:	STA AX,ALPHR
	STA AX,ALPHL
	DEX
	BPL 1$
	RTS

	.PAGE
	.SBTTL TELL PLAYERS TO SELECT PLAY
;
;BLOCK NAME:	TELLEM
;BLOCK TYPE:	SUBROUTINE
;BLOCK DESCIPT:	TELLEM WILL TELL PLAYERS TO SELECT SWING/PITCH
;
TELLEM:	LDX I,2
10$:	LDA ZX,OMESL		; LAST MESSGE PUSH START?
	AND I,7F
	CMP I,M.PS
	BEQ 31$			;YES, SKIP.
	CMP I,M.IC		;INSERT COINS?
	BEQ 31$			;YES, SKIP
	LDA ZX,PSTIM		;SELECTED?
	BNE 15$
	LDA I,M.RDY		;YES
	BNE 30$
15$:	LDA I,M.SWNG		;ASSUME #2 OFFENS
	CPX OFFENS
	BEQ 20$
	LDA I,M.PTCH		;#1 OFFENS
20$:	BIT INTCNT		;FLASH AT ABOUT 1 HZ
	BMI 30$
	ORA I,80		;BLINK
30$:	JSR REPLAC
31$:	DEX
	DEX			;NEXT PLAYER
	BPL 10$
	RTS
	.PAGE
	.SBTTL BANNER
;BLOCK NAME:	BANNER
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	BANNER WILL OUTPUT AN EMPTY SCOREBOARD AND INITIALIZE
;		LOCATIONS SCBDLH, SCBDLV, SCBDRH AND SCBDRV
;INPUT PARAMS:	NONE
;OUTPUT PARAMS:	SCBDLH,SCBDLV,SCBDRH,SCBDRV
;REG'S USED:	A
;SUBRT'S USED:	WRITEB
;
BANNER:	LDA I,M.BAN1		;OUTPUT SCOREBOARD
	JSR WRITEB
	LDA I,M.BAN2
	JSR WRITEB
	LDA I,M.BAN3
	JSR WRITEB
	LDA I,5D		;SET UP SCOREBOARD LOCATIONS
	STA SCBDRH
	LDA I,3D
	STA SCBDRV
	LDA I,2
	STA SCBDRH+1
	STA SCBDRV+1
	LDA I,0A0
	STA SCBDLH
	LDA I,0C0
	STA SCBDLV
	LDA I,3
	STA SCBDLH+1
	STA SCBDLV+1
	RTS
	.PAGE
	.SBTTL DISPLAY STATISTICS
;
;BLOCK NAME:	DSTAT
;BLOCK TYPE:	SUBROUTINE
;DESCRIPTION:	DSTAT WILL DISPLAY CURRENT STATISTICS
;
DSTAT:	LDA OUTS		;OUTS
	JSR ASCAX		;CONVERT TO ASCII
	TXA
	LDY I,57		;WRITE TO EACH SIDE
	JSR WRTAN
	LDY I,0C6
	JSR WRTAN
	LDA BALLS		;BALLS
	JSR ASCAX		;CONVERT TO ASCII
	TXA
	LDY I,4F		;WRITE TO BOTH
	JSR WRTAN
	LDY I,0CE
	JSR WRTAN
	LDA STRIKE		;STRIKES
	JSR ASCAX		;CONVERT TO ASCII
	TXA
	LDY I,53		;WRITE TO BOTH
	JSR WRTAN
	LDY I,0CA
	JSR WRTAN
	LDA RUNS		;RUNS FOR #1
	JSR ASCAX
	LDY I,4B
	CMP I,'0		;SUPPRESS ZERO
	BNE 30$
	LDA I,0
30$:	PHA			;SVE HIGH BYTE
	JSR WRTAN
	TXA
	JSR WRTAN
	PLA
	LDY I,0D2		;ON OTHER SIDE
	JSR WRTAN
	TXA
	JSR WRTAN
	LDA RUNS+2		;RUNS FOR #2
	JSR ASCAX
	LDY I,02B
	CMP I,'0		;SUPPRESS ZERO
	BNE 40$
	LDA I,0
40$:	PHA			;SAVE HIGH BYTE
	JSR WRTAN
	TXA
	JSR WRTAN
	PLA
	LDY I,0F2		;DISPLAY ON OHTER SIDE
	JSR WRTAN
	TXA
	JSR WRTAN
	LDA ININGS		;DISPLAY INNINGS PURCHASED
	JSR ASCAX
	LDY I,5A
	CMP I,'0
	BNE 50$
	LDA I,0
50$:	PHA			;SAVE HIGH BYTE
	JSR WRTAN
	TXA
	JSR WRTAN
	PLA			;DISPLAY ON OTHER SIDE
	LDY I,0C3
	JSR WRTAN
	TXA
	JSR WRTAN
	RTS
	.PAGE
	.SBTTL MESSAGES
WRITEB: LDX I,2			;POINT TO RIGHT PLAYER
	JSR REPLAC		;REPLACE HIS LAST MSG
	LDX I,0			;POINT TO LEFT
;FALL THROUGH TO DO THE SAME FOR LEFT
REPLAC:	CMP ZX,OMESL		;SAME MESSAGE?
	BEQ WRTMES		;YES, JUST REFRESH IT
	PHA			;SAVE NEW MSG#
	LDA ZX,OMESL
	AND I,7F		;STRIP POSSIBLE ERASE BIT
	CMP I,M.GO		;M.GO IS FIRST REPLACEABLE MSG
	BCC 1$			;BRANCH IF NO CONFLICT
	ORA I,80		;SET ERASE BIT
	JSR WRTMES		;TO CLEAR OLD MSG
1$:	PLA			;GET BACK NEW MSG
;FALL THROUGH TO WRITE NEW MSG.
;*************************
;*
;*MESSAGES
;*
;***************************
;
;DESCRIPTION:	IF (ACC>=0) OUTPUT MESSAGE (ACC) ELSE
;		CLEAR MESSAGE (ACC&7F). STOPS WHEN CHAR. HAS
;		D7 SET.
;
;
;REGISTERS:
;	IN:	ACC=MESSAGE #;X=PLAYER # (0-LEFT,2-RIGHT),Y-DON'T CARE
;	OUT:	ACC,X-RESTORED, Y-> NEXT DST POSN
;		OMES(L OR R) =MSG#
;		CARRY SET
;
;
;STACK USE:	2 BYTES FOR RTN ADDR.
;
;
;
;
;BASE PAGE USE:	WRITE: ANMSK,OMESL,OMESR
;
;
;
;
WRTMES:	STX WPLAYR
	STA ZX,OMESL		;GETS OMESR IF X=2
	ASL			;MSG # *2,CARRY=1 IF CLEAR, 0 IF WRITE
	TAY			;POINT INTO MSG TABLE
	LDA I,3F		;MASK TO USE FOR WRITING
	BCC 10$			;BRANCH IF WRITING
	LDA I,0			;ELSE SET MASK=0 TO ERASE
10$:	STA ANMSK
	LDA AY,MTBL+1		;GET SRC PTR
	CPX I,2			;SET CARRY IF X=2 (RIGHT)
	TAX			;X<-SRC
	LDA AY,MTBL		;GET DST PTR
	BCC 20$			;BRANCH IF LEFT
	EOR I,1F		;COMPLEMENT CHAR #
	ADC I,9D		;ACC<-1D-DST+80
	TAY			;Y<- DST PTR
	BMI 30$			;ALWAYS

20$:	EOR I,60		;COMPLEMENT ROW #
	TAY

30$:	LDA AX,MESLST		;GET MSG CHAR
	CMP I,80		;SET C=D7
	AND ANMSK		;STRIP D7,D6 (OR BLANK WHOLE CHAR.)
	JSR WRTAN		;WRT CHAR, BUMP DST PTR

	INX			;BUMP SRC PTR
	BCC 30$
	LDX WPLAYR
	LDA ZX,OMESL		;RESTORE MSG# TO ACC
	RTS

WRTAN:	AND I,3F		;CLEAR REFLECT BITS
	DEY
	INY			;TST Y WITHOUT BLITZING CARRY
	BPL 1$			;IF PLUS, PUT ON LEFT
	STA AY,ALPHR-0A0	;-20 FOR POSITIONING, -80 TO
	DEY			;COMPENSATE FOR FLAG
	RTS
1$:	ORA I,40		;REFLECT CHAR
	STA AY,ALPHL
	INY
	RTS

MTBL:	.BYTE 0,45$-1$,20,46$-1$,40,47$-1$
	.BYTE 51,6$-1$,51,7$-1$,50,8$-1$
	.BYTE 51,9$-1$,53,10$-1$,51,11$-1$,52,12$-1$
	.BYTE 50,14$-1$,53,15$-1$,50,16$-1$
	.BYTE 50,5$-1$,54,17$-1$,51,0,4E,2$-1$,55,3$-1$
	.BYTE 4E,18$-1$,52,M.20-1$,52,M.21-1$,51,M.22-1$
	.BYTE 50,M.23-1$,4F,M.24-1$
MESLST	=.
1$:	.ASCIN /INSERT@C0INS/
2$:	.ASCIN /1@C0IN@1@INNING/
3$:	.ASCIN /0UT/
45$:	.BYTE 1B,1D,1E,1F,20,21,22,23
	.BYTE 24,25,26,0,54,0,0,4A
	.BYTE 4F,0,51,57,58,0,0
	.BYTE 5A,3A,0,3B,3E,0BF
46$:	.BYTE 3C
	.REPT 9.
	.BYTE 1B
	.ENDR
	.BYTE 9B
47$:	.BYTE 3D
	.REPT 9.
	.BYTE 1B
	.ENDR
	.BYTE 9B
5$:	.ASCIN /SIDE@RETIRED/
6$:	.ASCIN /GAME@0VER/

7$:	.ASCIN /SELECT@HIT/
8$:	.ASCIN /SELECT@PITCH/
9$:	.ASCIN	/BALL/
10$:	.ASCIN	/STRIKE/
11$:	.ASCIN	/F0UL@BALL/
12$:	.ASCIN	/H0ME@RUN/
14$:	.ASCIN	/HIT@BATTER/
15$:	.ASCIN	/TRIPLE/
16$:	.ASCIN /D0UBLE@PLAY/
17$:	.ASCIN	/READY/
18$:	.ASCIN /GAME@ALM0ST@0VER/
M.20:	.ASCIN /LINE@0UT/
M.21:	.ASCIN /FLY@0UT/
M.22:	.ASCIN /MISSED@BASE/
M.23:	.ASCIN	/PUSH@START/
M.24:	.ASCIN	/ATARI@BASEBALL/
THRSHD:	.BYTE 0,0,0,0,89,85,22,16
	.BYTE 89,84,22,17,89,83,22,18
	.BYTE 89,81,22,19,89,7E,22,1A
	.BYTE 89,7C,22,1C,89,7C,23,1C
	.BYTE 89,7E,24,1C,89,81,25,1C
	.BYTE 89,82,27,1C,89,84,28,1C
	.BYTE 0,0,0,0
BATNGL:	.BYTE 90,98,0A0,0A8,0B0,0B8,0C0,0C8
	.BYTE 0D0,0D8,0E0,0E8,0F0,0
SPDTBL:	.BYTE 90,84,68,5C,34,30,28,21
SKILL:	.BYTE 4C,55,5E,68
INITBL:	.BYTE 1C,84,60,84,10,84,6C,48,91,60
	.BYTE 66,0C0,8B,0AC,0C0,0E0,0D8,87,0C0,30
	.BYTE 21,8A,0,0,0,0,0,0,5D,84,0,0
FRED:	.BYTE 84,60,86,24,46,61,80,9D
	.BYTE 0C2,60,88,9B
BGOALH:	.BYTE 24
BGOALV:	.BYTE 84
	.BYTE 5E,4A,98,84,5E,0C0
	.BYTE 24,84
CKS7:	.BYTE 2F
IVGOAL	= FRED-2
IHGOAL	= IVGOAL+1
MAINND:
	.END

                                                                                                            